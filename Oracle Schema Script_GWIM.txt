-- Create User
alter session set "_ORACLE_SCRIPT"=true; 
create user bspportal identified by bsp123;
grant all privileges to bspportal
grant connect , create session to bspportal

-- Create DB Schema
--------------------------------------------------------
--  File created - Thursday-March-31-2022   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence ACTIVITIES_ACTIVITY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ACTIVITIES_ACTIVITY_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ACTIVITY_ACTIVITY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ACTIVITY_ACTIVITY_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ACTIVITY_CATEGORIES_ACTIVI_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ACTIVITY_CATEGORIES_ACTIVI_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ACTIVITY_CONTACTS_ACTIVITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ACTIVITY_CONTACTS_ACTIVITY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ACTIVITY_HISTORY_ACTIVITY__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ACTIVITY_HISTORY_ACTIVITY__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ACTIVITY_STATUSES_ACTIVITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ACTIVITY_STATUSES_ACTIVITY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ALERTS_ALERT_TYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ALERTS_ALERT_TYPE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence AREAS_AREA_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AREAS_AREA_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ARTIFACTS_ARTIFACT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ARTIFACTS_ARTIFACT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ARTIFACT_TYPES_ARTIFACT_TY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ARTIFACT_TYPES_ARTIFACT_TY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence ATTACHMENTS_ATTACH_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ATTACHMENTS_ATTACH_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence CALENDAR_HOLIDAY_HOLIDAY_I_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CALENDAR_HOLIDAY_HOLIDAY_I_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence CHANGE_REQUESTS_CR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHANGE_REQUESTS_CR_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence CHANGE_REQUESTS_STATUS_CR__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHANGE_REQUESTS_STATUS_CR__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence CONFIG_TYPES_CONFIG_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONFIG_TYPES_CONFIG_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ESTIMATES_ESTIMATE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ESTIMATES_ESTIMATE_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ESTIMATE_BACKUP_ESTIMATE_I_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ESTIMATE_BACKUP_ESTIMATE_I_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ESTIMATE_GROUPS_ESTIMATE_G_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ESTIMATE_GROUPS_ESTIMATE_G_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

-------------------------------------------------------
--  DDL for Sequence ESTIMATE_HISTORY_ESTIMATE__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ESTIMATE_HISTORY_ESTIMATE__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ESTIMATE_HIST_ESTIMATE_HIS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ESTIMATE_HIST_ESTIMATE_HIS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ESTIMATE_TYPES_ESTIMATE_TY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ESTIMATE_TYPES_ESTIMATE_TY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence EXEC_GROUPS_EXEC_GROUP_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EXEC_GROUPS_EXEC_GROUP_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence EXTERNAL_ACTIVITIES_ACTIVI_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EXTERNAL_ACTIVITIES_ACTIVI_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence FORECAST_AREAS_FORECAST_AR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FORECAST_AREAS_FORECAST_AR_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence FORECAST_GROUPS_PROJ_GROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FORECAST_GROUPS_PROJ_GROUP_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence FORECAST_PROJECTS_FUNDING__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FORECAST_PROJECTS_FUNDING__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence FORECAST_PROJECT_STATUS_PR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FORECAST_PROJECT_STATUS_PR_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence FORECAST_STATUSES_STATUS_I_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FORECAST_STATUSES_STATUS_I_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence FORECAST_WEEKS_WEEKID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FORECAST_WEEKS_WEEKID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence FUNDING_SOURCES_FUNDING_SR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FUNDING_SOURCES_FUNDING_SR_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence FUNDING_TYPES_FUND_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FUNDING_TYPES_FUND_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence GROUP_INFO_GROUP_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP_INFO_GROUP_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALLS_INSTALL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALLS_INSTALL_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALL_ENVIRONMENTS_INST__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALL_ENVIRONMENTS_INST__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALL_HISTORY_HIST_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALL_HISTORY_HIST_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALL_ISSUES_INSTALL_ISS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALL_ISSUES_INSTALL_ISS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALL_ISSUE_COPY_INSTALL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALL_ISSUE_COPY_INSTALL_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALL_MILESTONES_INST_MI_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALL_MILESTONES_INST_MI_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALL_STATUSES_INSTALL_S_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALL_STATUSES_INSTALL_S_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALL_TASKS_TASK_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALL_TASKS_TASK_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INSTALL_TYPES_INSTALL_TYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTALL_TYPES_INSTALL_TYPE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INST_MILESTONE_TYPES_INST__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INST_MILESTONE_TYPES_INST__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence INTAKE_TECH_COMPONENT_GROU_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INTAKE_TECH_COMPONENT_GROU_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence LOBS_LOB_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "LOBS_LOB_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence NOTES_NOTE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NOTES_NOTE_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence NOTIFY_REPORTS_REPORT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NOTIFY_REPORTS_REPORT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ONCALL_COVERAGE_COVERAGETY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ONCALL_COVERAGE_COVERAGETY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ONCALL_COVERAGE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ONCALL_COVERAGE_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence ORGANIZATIONS_ORG_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGANIZATIONS_ORG_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence PILLARS_PILLAR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PILLARS_PILLAR_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence PRODUCTS_PRODUCT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PRODUCTS_PRODUCT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence REPORTFILTERS_FILTER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPORTFILTERS_FILTER_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence SCOPE_ITEMS_SCOPE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCOPE_ITEMS_SCOPE_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence SIZE_DATE_SIZE_REF_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SIZE_DATE_SIZE_REF_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence SIZING_DEF_SIZE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SIZING_DEF_SIZE_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STATUS_STATUS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STATUS_STATUS_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRATEGIES_COPY_STRAT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRATEGIES_COPY_STRAT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRATEGIES_STRAT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRATEGIES_STRAT_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_CATEGORIES_STRAT_CAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_CATEGORIES_STRAT_CAT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_ESTIMATES_ESTIMATE_I_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_ESTIMATES_ESTIMATE_I_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_HISTORY_HIST_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_HISTORY_HIST_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_ISSUES_RISKS_ISSUE_I_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_ISSUES_RISKS_ISSUE_I_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_ISSUES_RISKS_TYPES_S_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_ISSUES_RISKS_TYPES_S_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_PHASES_STRAT_PHASE_I_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_PHASES_STRAT_PHASE_I_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_PHASE_HISTORY_STRAT__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_PHASE_HISTORY_STRAT__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_ROLES_ROLE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_ROLES_ROLE_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_STATUS_HISTORY_STRAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_STATUS_HISTORY_STRAT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_STATUS_STRAT_STATUS__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_STATUS_STRAT_STATUS__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_TASKS_TASK_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_TASKS_TASK_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence STRAT_TASK_STATUS_TASK_STA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRAT_TASK_STATUS_TASK_STA_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence TASK_MILESTONES_MILESTONE__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TASK_MILESTONES_MILESTONE__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence TECH_COMPONENTS_COMPONENT__SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TECH_COMPONENTS_COMPONENT__SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence TESTTABL_TEST_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TESTTABL_TEST_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence USER_GROUPS_GROUP_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USER_GROUPS_GROUP_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Sequence USER_TYPES_USERTYPE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USER_TYPES_USERTYPE_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--  DDL for Table ACTIVITIES
--------------------------------------------------------

  CREATE TABLE "ACTIVITIES" 
   (	"ACTIVITY_ID" NUMBER(10,0), 
	"ACTIVITY_NAME" VARCHAR2(40 CHAR), 
	"ACT_START" DATE, 
	"ACT_END" DATE, 
	"RESPONSIBLE_COMPONENT_ID" NUMBER(10,0), 
	"POINT_PERSON" VARCHAR2(15 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table ACTIVITY
--------------------------------------------------------

  CREATE TABLE "ACTIVITY" 
   (	"ACTIVITY_ID" NUMBER(10,0), 
	"ACTIVITY_ADDEDBY" VARCHAR2(15 CHAR), 
	"ACTIVITY_ADDED" DATE, 
	"ACTIVITY_TITLE" VARCHAR2(100 CHAR), 
	"ACTIVITY_START_DATE" DATE, 
	"ACTIVITY_START_TIME" DATE, 
	"ACTIVITY_END_DATE" DATE, 
	"ACTIVITY_END_TIME" DATE, 
	"ACTIVITY_DETAIL" CLOB, 
	"ACTIVITY_IMPACT" CLOB, 
	"ACTIVITY_ESCALATION" CLOB, 
	"ACTIVITY_STATUS_ID" NUMBER(10,0), 
	"ACTIVITY_CATEGORY_ID" NUMBER(10,0), 
	"ACTIVITY_LOB" VARCHAR2(100 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ACTIVITY_DETAIL") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ACTIVITY_IMPACT") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ACTIVITY_ESCALATION") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table ACTIVITY_CATEGORIES
--------------------------------------------------------

  CREATE TABLE "ACTIVITY_CATEGORIES" 
   (	"ACTIVITY_CATEGORY_ID" NUMBER(10,0), 
	"ACTIVITY_CATEGORY_DESC" VARCHAR2(30 CHAR), 
	"ACTIVITY_CATEGORY_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ACTIVITY_CONTACTS
--------------------------------------------------------

  CREATE TABLE "ACTIVITY_CONTACTS" 
   (	"ACTIVITY_CONTACT_ID" NUMBER(10,0), 
	"ACTIVITY_ID" NUMBER(10,0), 
	"ACTIVITY_CONTACT_NAME" VARCHAR2(100 CHAR), 
	"ACTIVITY_CONTACT_EMAIL" VARCHAR2(200 CHAR), 
	"ACTIVITY_CONTACT_PHONE1" VARCHAR2(30 CHAR), 
	"ACTIVITY_CONTACT_PHONE2" VARCHAR2(30 CHAR), 
	"ACTIVITY_CONTACT_NOTES" VARCHAR2(150 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table ACTIVITY_HISTORY
--------------------------------------------------------

  CREATE TABLE "ACTIVITY_HISTORY" 
   (	"ACTIVITY_HIST_ID" NUMBER(10,0), 
	"ACTIVITY_HISTORY_DATE" DATE, 
	"ACTIVITY_HISTORY_ADDED_BY" VARCHAR2(15 CHAR), 
	"ACTIVITY_HISTORY_STATUS" NUMBER(10,0), 
	"ACITIVITY_HISTORY" CLOB, 
	"ACTIVITY_PUBLIC" NUMBER(10,0), 
	"ACTIVITY_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ACITIVITY_HISTORY") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table ACTIVITY_LOBS
--------------------------------------------------------

  CREATE TABLE "ACTIVITY_LOBS" 
   (	"ACTIVITY_ID" NUMBER(10,0), 
	"ACTIVITY_LOB_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table ACTIVITY_STATUSES
--------------------------------------------------------

  CREATE TABLE "ACTIVITY_STATUSES" 
   (	"ACTIVITY_STATUS_ID" NUMBER(10,0), 
	"ACTIVITY_DESC" VARCHAR2(30 CHAR), 
	"ACTIVITY_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ALERTS
--------------------------------------------------------

  CREATE TABLE "ALERTS" 
   (	"ALERT_TYPE" NUMBER(10,0), 
	"ALERT_DESCRIPTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table AREAS
--------------------------------------------------------

  CREATE TABLE "AREAS" 
   (	"AREA_ID" NUMBER(10,0), 
	"AREA_DESC" VARCHAR2(30 CHAR), 
	"VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table ARTIFACTS
--------------------------------------------------------

  CREATE TABLE "ARTIFACTS" 
   (	"ARTIFACT_ID" NUMBER(10,0), 
	"ARTIFACT_LINK" CLOB, 
	"ARTIFACT_ADDED" DATE, 
	"ARTIFACT_DUE" DATE, 
	"ARTIFACT_ACTIVE" NUMBER(10,0), 
	"ARTIFACT_ADDEDBY" VARCHAR2(20 CHAR), 
	"ARTIFACT_TYPE_ID" NUMBER(10,0), 
	"ARTIFACT_VERSION" VARCHAR2(15 CHAR), 
	"STRAT_ID" NUMBER(10,0), 
	"LOCKDATE" DATE, 
	"LOCKBY" VARCHAR2(20 CHAR), 
	"ARTIFACT_NOTE" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ARTIFACT_LINK") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ARTIFACT_NOTE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table ARTIFACT_TO_COMPONENT
--------------------------------------------------------

  CREATE TABLE "ARTIFACT_TO_COMPONENT" 
   (	"ARTIFACT_ID" NUMBER(10,0), 
	"COMPONENT_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table ARTIFACT_TYPES
--------------------------------------------------------

  CREATE TABLE "ARTIFACT_TYPES" 
   (	"ARTIFACT_TYPE_ID" NUMBER(10,0), 
	"ARTIFACT_TYPE_DESC" VARCHAR2(60 CHAR), 
	"ARTIFACT_VISIBLE" NUMBER(10,0), 
	"SORT_ORDER" NUMBER(10,0), 
	"NON_PUBLIC" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ARTIFACT_USERS
--------------------------------------------------------

  CREATE TABLE "ARTIFACT_USERS" 
   (	"ARTIFACT_ID" NUMBER(10,0), 
	"ARTIFACT_USER" VARCHAR2(255 CHAR), 
	"ARTIFACT_ROLE" NUMBER(10,0), 
	"ARTIFACT_SIGNOFF" NUMBER(10,0), 
	"ARTIFACT_SIGNOFF_DATE" DATE, 
	"ARTIFACT_COMMENTS" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ARTIFACT_COMMENTS") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table ATTACHMENTS
--------------------------------------------------------

  CREATE TABLE "ATTACHMENTS" 
   (	"ATTACH_ID" NUMBER(10,0), 
	"ATTACH_TYPE" NUMBER(10,0), 
	"REF_ID" NUMBER(10,0), 
	"FILE_DESC" VARCHAR2(100 CHAR), 
	"FILENAME" VARCHAR2(350 CHAR), 
	"LINK" CLOB, 
	"VISIBLE" NUMBER(10,0), 
	"ADDEDBY" VARCHAR2(20 CHAR), 
	"ADDED" DATE, 
	"LOCKED" NUMBER(10,0), 
	"FOLDER_ID" NUMBER(10,0), 
	"ARTIFACT_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("LINK") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table CALENDAR_HOLIDAY
--------------------------------------------------------

  CREATE TABLE "CALENDAR_HOLIDAY" 
   (	"HOLIDAY_ID" NUMBER(10,0), 
	"HOLIDAYDATE" DATE, 
	"HOLIDAYDESC" VARCHAR2(60 CHAR), 
	"HOLIDAY_GWIM" NUMBER(10,0), 
	"HOLIDAY_CONSUMER" NUMBER(10,0), 
	"HOLIDAY_INDIA" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table CHANGE_REQUESTS
--------------------------------------------------------

  CREATE TABLE "CHANGE_REQUESTS" 
   (	"CR_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"CR_NUM" NUMBER(10,0), 
	"CR_STATUS" NUMBER(10,0), 
	"CR_ADDED" DATE, 
	"CR_ADDEDBY" VARCHAR2(15 CHAR), 
	"CR_TITLE" VARCHAR2(200 CHAR), 
	"CR_OVERVIEW" CLOB, 
	"CR_JUSTIFICATION" CLOB, 
	"CR_REQUESTED_BY" VARCHAR2(15 CHAR), 
	"CR_APPROVED_BY" VARCHAR2(15 CHAR), 
	"CR_APPROVEDDATE" DATE, 
	"CR_IMPACTDUE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("CR_OVERVIEW") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("CR_JUSTIFICATION") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table CHANGE_REQUESTS_STATUS
--------------------------------------------------------

  CREATE TABLE "CHANGE_REQUESTS_STATUS" 
   (	"CR_STATUS" NUMBER(10,0), 
	"CR_STATUS_DESC" VARCHAR2(255 CHAR), 
	"CR_STATUS_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table CONFIG_TYPES
--------------------------------------------------------

  CREATE TABLE "CONFIG_TYPES" 
   (	"CONFIG_ID" NUMBER(10,0), 
	"CONFIG_DESC" VARCHAR2(50 CHAR), 
	"CONFIG_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table CTI_PLANNING
--------------------------------------------------------

  CREATE TABLE "CTI_PLANNING" 
   (	"STRAT_ID" NUMBER(10,0), 
	"CTI_MONTH" NUMBER(10,0), 
	"CTI_YEAR" NUMBER(10,0), 
	"CTI_HOURS" NUMBER(10,0), 
	"ESTIMATE_GRP" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table DEV_PLANNING
--------------------------------------------------------

  CREATE TABLE "DEV_PLANNING" 
   (	"STRAT_ID" NUMBER(10,0), 
	"DEV_MONTH" NUMBER(10,0), 
	"DEV_YEAR" NUMBER(10,0), 
	"DEV_USER" VARCHAR2(255 CHAR), 
	"DEV_HOURS" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ESTIMATES
--------------------------------------------------------

  CREATE TABLE "ESTIMATES" 
   (	"ESTIMATE_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"ESTIMATE_GRP" NUMBER(10,0), 
	"ESTIMATE_VALUE_DOMESTIC" NUMBER, 
	"ESTIMATE_VALUE_OFFSHORE" NUMBER, 
	"ESTIMATE_VALUE_FIXED_AMT" NUMBER, 
	"ESTIMATE_DETAIL" CLOB, 
	"ESTIMATE_ONGOING" CLOB, 
	"ADDEDBY" VARCHAR2(15 CHAR), 
	"ADDED" DATE, 
	"ESTIMATE_TYPE_ID" NUMBER(10,0), 
	"RATEYEAR" DATE, 
	"ESTIMATE_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ESTIMATE_DETAIL") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ESTIMATE_ONGOING") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table ESTIMATE_ALLOCATIONS
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_ALLOCATIONS" 
   (	"STRAT_ID" NUMBER(10,0), 
	"LOB_ID" NUMBER(10,0), 
	"ALLOCATION" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ESTIMATE_BACKUP
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_BACKUP" 
   (	"ESTIMATE_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"ESTIMATE_GRP" NUMBER(10,0), 
	"ESTIMATE_VALUE_DOMESTIC" NUMBER, 
	"ESTIMATE_VALUE_OFFSHORE" NUMBER, 
	"ESTIMATE_VALUE_FIXED_AMT" NUMBER, 
	"ESTIMATE_DETAIL" CLOB, 
	"ESTIMATE_ONGOING" CLOB, 
	"ADDEDBY" VARCHAR2(15 CHAR), 
	"ADDED" DATE, 
	"ESTIMATE_TYPE_ID" NUMBER(10,0), 
	"ESTIMATE_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ESTIMATE_DETAIL") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ESTIMATE_ONGOING") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table ESTIMATE_GROUPS
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_GROUPS" 
   (	"ESTIMATE_GRP" NUMBER(10,0), 
	"GROUP_NAME" VARCHAR2(50 CHAR), 
	"GROUP_RATE_DOMESTIC_DOUBLE_DEF" NUMBER, 
	"FIN_HIER" VARCHAR2(20 CHAR), 
	"VISIBLE" NUMBER(10,0), 
	"OWNER" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table ESTIMATE_GROUP_RATES
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_GROUP_RATES" 
   (	"ESTIMATE_GRP" NUMBER(10,0), 
	"RATEYEAR" DATE, 
	"GROUP_RATE_DOMESTIC" NUMBER, 
	"GROUP_RATE_OFFSHORE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ESTIMATE_HIST
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_HIST" 
   (	"ESTIMATE_HIST_ID" NUMBER(10,0), 
	"ESTIMATE_ID" NUMBER(10,0), 
	"UPDATE_FIELD" VARCHAR2(50 CHAR), 
	"OLD_VALUE" CLOB, 
	"NEW_VALUE" CLOB, 
	"UPDATED_BY" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("OLD_VALUE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("NEW_VALUE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table ESTIMATE_HISTORY
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_HISTORY" 
   (	"ESTIMATE_HISTORY_ID" NUMBER(10,0), 
	"ESTIMATE_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"ESTIMATE_GRP" NUMBER(10,0), 
	"ESTIMATE_VALUE_DOMESTIC" NUMBER, 
	"ESTIMATE_VALUE_OFFSHORE" NUMBER, 
	"ESTIMATE_VALUE_FIXED_AMT" NUMBER, 
	"ESTIMATE_DETAIL" CLOB, 
	"ESTIMATE_ONGOING" CLOB, 
	"UPDATEDBY" VARCHAR2(15 CHAR), 
	"ESTIMATE_TYPE_ID" NUMBER(10,0), 
	"RATEYEAR" DATE, 
	"ESTIMATE_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ESTIMATE_DETAIL") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ESTIMATE_ONGOING") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table ESTIMATE_NOTIFY_EXCLUDE
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_NOTIFY_EXCLUDE" 
   (	"USERID" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ESTIMATE_PROJECT_OWNER
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_PROJECT_OWNER" 
   (	"STRAT_ID" NUMBER(10,0), 
	"EST_GROUP_ID" NUMBER(10,0), 
	"EST_OWNER" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ESTIMATE_TYPES
--------------------------------------------------------

  CREATE TABLE "ESTIMATE_TYPES" 
   (	"ESTIMATE_TYPE_ID" NUMBER(10,0), 
	"ESTIMATE_TYPE_DESC" VARCHAR2(255 CHAR), 
	"ESTIMATE_TYPE_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table EXEC_GROUPS
--------------------------------------------------------

  CREATE TABLE "EXEC_GROUPS" 
   (	"EXEC_GROUP_ID" NUMBER(10,0), 
	"EXEC_GROUP_DESC" VARCHAR2(30 CHAR), 
	"EXEC_GROUP_VISIBLE" NUMBER(10,0), 
	"EXEC_USERID" VARCHAR2(15 CHAR), 
	"EXEC_REPORT_TITLE" VARCHAR2(100 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table EXTERNAL_ACTIVITIES
--------------------------------------------------------

  CREATE TABLE "EXTERNAL_ACTIVITIES" 
   (	"ACTIVITY_ID" NUMBER(10,0), 
	"ACTIVITY_TITLE" VARCHAR2(255 CHAR), 
	"ACTIVITY_START" DATE, 
	"ACTIVITY_END" DATE, 
	"ACTIVITY_DETAILS" CLOB, 
	"ACTIVITY_IMPACTS" CLOB, 
	"ACTIVITY_ESCALATION" CLOB, 
	"ACTIVITY_STATUS_ID" NUMBER(10,0), 
	"ACTIVITY_CATEGORY_ID" NUMBER(10,0), 
	"ACTIVITY_ADDED" DATE, 
	"ACTIVITY_ADDED_BY" VARCHAR2(15 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ACTIVITY_DETAILS") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ACTIVITY_IMPACTS") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ACTIVITY_ESCALATION") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table FORECAST_AREAS
--------------------------------------------------------

  CREATE TABLE "FORECAST_AREAS" 
   (	"FORECAST_AREA_ID" NUMBER(10,0), 
	"FORECAST_AREA_NAME" VARCHAR2(35 CHAR), 
	"VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table FORECAST_GROUPS
--------------------------------------------------------

  CREATE TABLE "FORECAST_GROUPS" 
   (	"PROJ_GROUP" NUMBER(10,0), 
	"GROUP_DESC" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table FORECAST_PROJECTS
--------------------------------------------------------

  CREATE TABLE "FORECAST_PROJECTS" 
   (	"FUNDING_ID" NUMBER(10,0), 
	"CLARITY" VARCHAR2(20 CHAR), 
	"CASEMGR_NUM" VARCHAR2(20 CHAR), 
	"NAME" VARCHAR2(100 CHAR), 
	"PROJ_DESC" VARCHAR2(150 CHAR), 
	"ML_PROJECT" VARCHAR2(100 CHAR), 
	"PROJ_GROUP" NUMBER(10,0), 
	"PROJ_STATUS_ID" NUMBER(10,0), 
	"PROJ_START" DATE, 
	"PROJ_END" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table FORECAST_PROJECT_STATUS
--------------------------------------------------------

  CREATE TABLE "FORECAST_PROJECT_STATUS" 
   (	"PROJ_STATUS_ID" NUMBER(10,0), 
	"PROJ_STATUS_DESC" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table FORECAST_STATUSES
--------------------------------------------------------

  CREATE TABLE "FORECAST_STATUSES" 
   (	"STATUS_ID" NUMBER(10,0), 
	"STATUS_DESCRIPTION" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table FORECAST_TEAMS
--------------------------------------------------------

  CREATE TABLE "FORECAST_TEAMS" 
   (	"FUNDING_ID" NUMBER(10,0), 
	"USERID" VARCHAR2(15 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table FORECAST_TIME
--------------------------------------------------------

  CREATE TABLE "FORECAST_TIME" 
   (	"WEEKID" NUMBER(10,0), 
	"USERID" VARCHAR2(15 CHAR), 
	"PROJECT_ID" NUMBER(10,0), 
	"HOURS" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table FORECAST_WEEKS
--------------------------------------------------------

  CREATE TABLE "FORECAST_WEEKS" 
   (	"WEEKID" NUMBER(10,0), 
	"WEEK_START" DATE, 
	"WEEK_END" DATE, 
	"STATUS" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

-------------------------------------------------------
--  DDL for Table FUNDING_COMMITMENTS
--------------------------------------------------------

  CREATE TABLE "FUNDING_COMMITMENTS" 
   (	"FUNDING_ID" NUMBER(10,0), 
	"FUNDING_YEAR" VARCHAR2(4 CHAR), 
	"FUNDING_AMOUNT" NUMBER, 
	"FORECAST_AREA_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table FUNDING_SOURCES
--------------------------------------------------------

  CREATE TABLE "FUNDING_SOURCES" 
   (	"FUNDING_SRC_ID" NUMBER(10,0), 
	"FUNDING_SRC_DESC" VARCHAR2(20 CHAR), 
	"FUNDING_SRC_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table FUNDING_TYPES
--------------------------------------------------------

  CREATE TABLE "FUNDING_TYPES" 
   (	"FUND_ID" NUMBER(10,0), 
	"FUND_DESC" VARCHAR2(30 CHAR), 
	"FUND_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table GROUP_INFO
--------------------------------------------------------

  CREATE TABLE "GROUP_INFO" 
   (	"GROUP_ID" NUMBER(10,0), 
	"GROUP_DESC" VARCHAR2(50 CHAR), 
	"HOURLY_RATE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table INSTALLS
--------------------------------------------------------

  CREATE TABLE "INSTALLS" 
   (	"INSTALL_ID" NUMBER(10,0), 
	"INSTALL_START" DATE, 
	"INSTALL_END" DATE, 
	"INSTALL_TITLE" VARCHAR2(100 CHAR), 
	"INSTALL_STATUS_ID" NUMBER(10,0), 
	"INSTALL_TYPE" NUMBER(10,0), 
	"INSTALL_CREATEDBY" VARCHAR2(15 CHAR), 
	"INSTALL_CREATED" DATE, 
	"INSTALL_LASTSTATUS" DATE, 
	"INSTALL_OWNERGROUP" NUMBER(10,0), 
	"INST_ENV_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table INSTALL_ENVIRONMENTS
--------------------------------------------------------

  CREATE TABLE "INSTALL_ENVIRONMENTS" 
   (	"INST_ENV_ID" NUMBER(10,0), 
	"INST_ENVIRONMENT" VARCHAR2(25 CHAR), 
	"INST_ENV_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table INSTALL_HISTORY
--------------------------------------------------------

  CREATE TABLE "INSTALL_HISTORY" 
   (	"HIST_ID" NUMBER(10,0), 
	"FDATE" DATE, 
	"USERID" VARCHAR2(15 CHAR), 
	"NEW_STATUS_ID" NUMBER(10,0), 
	"COMMENT_" CLOB, 
	"INSTALL_ID" NUMBER(10,0), 
	"PUBLIC_" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("COMMENT_") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table INSTALL_ISSUES
--------------------------------------------------------

  CREATE TABLE "INSTALL_ISSUES" 
   (	"INSTALL_ISSUE_ID" NUMBER(10,0), 
	"INSTALL_ID" NUMBER(10,0), 
	"INSTALL_ISSUE_TITLE" VARCHAR2(50 CHAR), 
	"INSTALL_ISSUE_STATUS" VARCHAR2(200 CHAR), 
	"INSTALL_ISSUE_DESCRIPTION" CLOB, 
	"INSTALL_ISSUE_IMPACT" VARCHAR2(50 CHAR), 
	"INSTALL_ISSUE_REPORTEDBY" VARCHAR2(100 CHAR), 
	"INSTALL_ISSUE_NOTES" CLOB, 
	"INSTALL_ISSUE_ADDEDBY" VARCHAR2(15 CHAR), 
	"INSTALL_ISSUE_ADDED" DATE, 
	"INSTALL_ISSUE_LASTUPDATE" DATE, 
	"INSTALL_ISSUE_LASTUPDATEBY" VARCHAR2(15 CHAR), 
	"INSTALL_ISSUE_VISIBLE" NUMBER(10,0), 
	"INSTALL_ISSUE_OPEN" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("INSTALL_ISSUE_DESCRIPTION") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INSTALL_ISSUE_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table INSTALL_ISSUE_COPY
--------------------------------------------------------

  CREATE TABLE "INSTALL_ISSUE_COPY" 
   (	"INSTALL_ISSUE_ID" NUMBER(10,0), 
	"INSTALL_ID" NUMBER(10,0), 
	"INSTALL_ISSUE_TITLE" VARCHAR2(50 CHAR), 
	"INSTALL_ISSUE_STATUS" VARCHAR2(200 CHAR), 
	"INSTALL_ISSUE_DESCRIPTION" CLOB, 
	"INSTALL_ISSUE_IMPACT" VARCHAR2(50 CHAR), 
	"INSTALL_ISSUE_REPORTEDBY" VARCHAR2(100 CHAR), 
	"INSTALL_ISSUE_NOTES" CLOB, 
	"INSTALL_ISSUE_ADDEDBY" VARCHAR2(15 CHAR), 
	"INSTALL_ISSUE_ADDED" DATE, 
	"INSTALL_ISSUE_LASTUPDATE" DATE, 
	"INSTALL_ISSUE_LASTUPDATEBY" VARCHAR2(15 CHAR), 
	"INSTALL_ISSUE_VISIBLE" NUMBER(10,0), 
	"INSTALL_ISSUE_OPEN" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("INSTALL_ISSUE_DESCRIPTION") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INSTALL_ISSUE_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table INSTALL_MILESTONES
--------------------------------------------------------

  CREATE TABLE "INSTALL_MILESTONES" 
   (	"INST_MILE_ID" NUMBER(10,0), 
	"INSTALL_ID" NUMBER(10,0), 
	"INST_MILESTONE_TYPE_ID" NUMBER(10,0), 
	"ADDEDBY" VARCHAR2(15 CHAR), 
	"ADDEDDATE" DATE, 
	"START_DATE" DATE, 
	"END_DATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table INSTALL_STATUSES
--------------------------------------------------------

  CREATE TABLE "INSTALL_STATUSES" 
   (	"INSTALL_STATUS_ID" NUMBER(10,0), 
	"INSTALL_STATUS_DESC" VARCHAR2(26 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table INSTALL_TASKS
--------------------------------------------------------

  CREATE TABLE "INSTALL_TASKS" 
   (	"TASK_ID" NUMBER(38,0), 
	"INSTALL_ID" NUMBER(10,0), 
	"TASK_DESC" CLOB, 
	"TASK_START" DATE, 
	"TASK_DUE" DATE, 
	"TASK_PERCENT" NUMBER(10,0), 
	"TASK_STATUS_ID" NUMBER(10,0), 
	"TASK_STAT_COLOR" NUMBER(10,0), 
	"TASK_TREND_COLOR" NUMBER(10,0), 
	"ASSIGNED_TO" VARCHAR2(10 CHAR), 
	"ASSIGNED_BY" VARCHAR2(10 CHAR), 
	"ADD_DATE" VARCHAR2(30 CHAR), 
	"LAST_UPDATE" VARCHAR2(30 CHAR), 
	"MILESTONE_ID" NUMBER(10,0), 
	"TASK_NOTES" CLOB, 
	"STRAT_PHASE_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("TASK_DESC") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("TASK_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table INSTALL_TYPES
--------------------------------------------------------

  CREATE TABLE "INSTALL_TYPES" 
   (	"INSTALL_TYPE" NUMBER(10,0), 
	"INSTALL_TYPE_DESC" VARCHAR2(35 CHAR), 
	"INSTALL_TYPE_DESC_SHORT" VARCHAR2(15 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table INST_MILESTONE_TYPES
--------------------------------------------------------

  CREATE TABLE "INST_MILESTONE_TYPES" 
   (	"INST_MILESTONE_TYPE_ID" NUMBER(10,0), 
	"MILESTONE_DESC" VARCHAR2(50 CHAR), 
	"MILE_VISIBLE" NUMBER(10,0), 
	"DISPLAY_ORDER" NUMBER(10,0), 
	"CALL_BACK_COLOR" VARCHAR2(7 CHAR), 
	"CALL_TEXT_COLOR" VARCHAR2(7 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table INTAKE_TECH_COMPONENT_GROUPING
--------------------------------------------------------

  CREATE TABLE "INTAKE_TECH_COMPONENT_GROUPING" 
   (	"INTAKE_GROUP_ID" NUMBER(10,0), 
	"INTAKE_GROUP_DESC" VARCHAR2(30 CHAR), 
	"INTAKE_GROUP_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table LOBS
--------------------------------------------------------

  CREATE TABLE "LOBS" 
   (	"LOB_ID" NUMBER(10,0), 
	"LOB_DESC" VARCHAR2(50 CHAR), 
	"LOB_VISIBLE" NUMBER(10,0), 
	"FIN_HIER" VARCHAR2(20 CHAR), 
	"ORG_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table NOTES
--------------------------------------------------------

  CREATE TABLE "NOTES" 
   (	"NOTE_ID" NUMBER(10,0), 
	"NOTE_TYPE" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"INSTALL_ID" NUMBER(10,0), 
	"USERID" VARCHAR2(20 CHAR), 
	"ADD_DATE" DATE, 
	"NOTE" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("NOTE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table NOTIFY_REPORTS
--------------------------------------------------------

  CREATE TABLE "NOTIFY_REPORTS" 
   (	"REPORT_ID" NUMBER(10,0), 
	"REPORT_DESC" VARCHAR2(100 CHAR), 
	"LOB_ID" NUMBER(10,0), 
	"REPORT_DETAIL" VARCHAR2(200 CHAR), 
	"VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ONCALL
--------------------------------------------------------

  CREATE TABLE "ONCALL" 
   (	"COVERAGE_ID" NUMBER(10,0), 
	"USERID" VARCHAR2(25 CHAR), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"COVERAGE_TYPE" NUMBER(10,0), 
	"ONCALLORDER" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ONCALL_COVERAGE
--------------------------------------------------------

  CREATE TABLE "ONCALL_COVERAGE" 
   (	"COVERAGETYPE" NUMBER(10,0), 
	"COVERAGE_DESC" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table ORGANIZATIONS
--------------------------------------------------------

  CREATE TABLE "ORGANIZATIONS" 
   (	"ORG_ID" NUMBER(10,0), 
	"ORGANIZATION_DESC" VARCHAR2(50 CHAR), 
	"ORG_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table PILLARS
--------------------------------------------------------

  CREATE TABLE "PILLARS" 
   (	"PILLAR_ID" NUMBER(10,0), 
	"PILLAR_DESC" VARCHAR2(100 CHAR), 
	"PILLAR_ABBR" VARCHAR2(25 CHAR), 
	"PILLAR_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table PORTAL_CONFIG
--------------------------------------------------------

  CREATE TABLE "PORTAL_CONFIG" 
   (	"CONFIG_ID" VARCHAR2(30 CHAR), 
	"CONFIG_VALUE" VARCHAR2(30 CHAR), 
	"CONFIG_DESC" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table PRODUCTS
--------------------------------------------------------

  CREATE TABLE "PRODUCTS" 
   (	"PRODUCT_ID" NUMBER(10,0), 
	"PRODUCT_NAME" VARCHAR2(50 CHAR), 
	"PRODUCT_VISIBLE" NUMBER(10,0), 
	"COMPONENT_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table REPORTFILTERS
--------------------------------------------------------

  CREATE TABLE "REPORTFILTERS" 
   (	"FILTER_ID" NUMBER(10,0), 
	"USERID" VARCHAR2(15 CHAR), 
	"FILTERVAL" VARCHAR2(255 CHAR), 
	"FILTER_NAME" VARCHAR2(150 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table REPORT_SUBSCRIPTIONS
--------------------------------------------------------

  CREATE TABLE "REPORT_SUBSCRIPTIONS" 
   (	"EMAIL_ADDRESS" VARCHAR2(150 CHAR), 
	"REPORT_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table RESOURCEPLANNING
--------------------------------------------------------

  CREATE TABLE "RESOURCEPLANNING" 
   (	"USERID" VARCHAR2(20 CHAR), 
	"STRAT_ID" NUMBER(10,0), 
	"WEEK_START" DATE, 
	"HOURS" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table ROLE_ACCESS
--------------------------------------------------------

  CREATE TABLE "ROLE_ACCESS" 
   (	"ROLE_ID" VARCHAR2(8 CHAR), 
	"ROLE_DESC" VARCHAR2(50 CHAR), 
	"ADMIN" NUMBER(10,0), 
	"STRAT_MANAGE" NUMBER(10,0), 
	"STRAT_SUBMIT" NUMBER(10,0), 
	"STRAT_MEMBERS" NUMBER(10,0), 
	"STRAT_FILES" NUMBER(10,0), 
	"STRAT_TASKS" NUMBER(10,0), 
	"USERADD" NUMBER(10,0), 
	"NEWS" NUMBER(10,0), 
	"REPORTS" NUMBER(10,0), 
	"INSTALL_MG" NUMBER(10,0), 
	"FORECAST" NUMBER(10,0), 
	"ANALYST_EDIT" NUMBER(10,0), 
	"CTI_EDIT" NUMBER(10,0), 
	"RES_PLAN" NUMBER(10,0), 
	"DEV_TASKS" NUMBER(10,0), 
	"SWAG_MGT" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table SCOPE_ITEMS
--------------------------------------------------------

  CREATE TABLE "SCOPE_ITEMS" 
   (	"SCOPE_ID" NUMBER(10,0), 
	"COMPONENT_ID" NUMBER(10,0), 
	"SCOPE_DESC" VARCHAR2(25 CHAR), 
	"SCOPE_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table SIZE_DATE
--------------------------------------------------------

  CREATE TABLE "SIZE_DATE" 
   (	"SIZE_REF" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"SIZE_ID" NUMBER(10,0), 
	"ADDED" DATE, 
	"ADDEDBY" VARCHAR2(20 CHAR), 
	"APPROVEDBY" VARCHAR2(255 CHAR), 
	"APPROVEDDATE" DATE, 
	"SIZE_DETAIL" CLOB, 
	"SIZE_RANGE" NUMBER(10,0), 
	"RELEASED" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("SIZE_DETAIL") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table SIZING_DEF
--------------------------------------------------------

  CREATE TABLE "SIZING_DEF" 
   (	"SIZE_ID" NUMBER(10,0), 
	"SIZE_DESCRIPTION" VARCHAR2(10 CHAR), 
	"SIZE_MONEY_LOW" NUMBER, 
	"SIZE_MONEY_HIGH" NUMBER, 
	"SIZE_DURATION" VARCHAR2(100 CHAR), 
	"SIZE_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table STATUS
--------------------------------------------------------

  CREATE TABLE "STATUS" 
   (	"STATUS_ID" NUMBER(10,0), 
	"STATUS_DESC" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRATEGIES
--------------------------------------------------------

  CREATE TABLE "STRATEGIES" 
   (	"STRAT_ID" NUMBER(10,0), 
	"STRAT_NAME" VARCHAR2(255 CHAR), 
	"STRAT_REQUESTOR" VARCHAR2(50 CHAR), 
	"STRAT_REQUESTOR_DEPT" VARCHAR2(50 CHAR), 
	"STRAT_REQ_BUS_AREA" VARCHAR2(50 CHAR), 
	"STRAT_OBJECTIVES" CLOB, 
	"STRAT_BUS_JUST" CLOB, 
	"STRAT_BENEFIT" CLOB, 
	"STRAT_ADDED_BY" VARCHAR2(15 CHAR), 
	"STRAT_STATUS_ID" NUMBER(10,0), 
	"STRAT_CATEGORY" NUMBER(10,0), 
	"STRAT_UPDATE" CLOB, 
	"STRAT" NUMBER(10,0), 
	"STRAT_COLOR" NUMBER(10,0), 
	"STRAT_STATUSDATE" DATE, 
	"START_DATE" DATE, 
	"TARGET_DATE" DATE, 
	"TARGET_FIRM" NUMBER(10,0), 
	"EXECVIEW" NUMBER(10,0), 
	"PRIORITYHIDE" NUMBER(10,0), 
	"APPLICATION" NUMBER(10,0), 
	"PROJ_REG" VARCHAR2(20 CHAR), 
	"CM_NUM" VARCHAR2(20 CHAR), 
	"CM_STATUS" VARCHAR2(20 CHAR), 
	"PET_NUM" VARCHAR2(20 CHAR), 
	"PARENT_CLARITY" VARCHAR2(20 CHAR), 
	"CHILD_CLARITY" VARCHAR2(20 CHAR), 
	"LOB_ID" NUMBER(10,0), 
	"EXEC_STATUS" CLOB, 
	"FUNDED" NUMBER(10,0), 
	"FUNDED_AMOUNT" NUMBER, 
	"FUNDING_TYPE" NUMBER(10,0), 
	"NEXUS_ID" VARCHAR2(20 CHAR), 
	"PM_CHANGE_NOTES" CLOB, 
	"GROUP_ID" NUMBER(10,0), 
	"RISKS" CLOB, 
	"ISSUES" CLOB, 
	"GOTOGREEN" CLOB, 
	"PROJUID" VARCHAR2(100 CHAR), 
	"SHAREPOINT_LINK" CLOB, 
	"TEST_NOTES" CLOB, 
	"GPPID" VARCHAR2(15 CHAR), 
	"RESOURCE_PLAN" NUMBER(10,0), 
	"PRIORITY_REQUEST" NUMBER(10,0), 
	"ANALYST_SUMMARY" CLOB, 
	"SWAG_REQ" DATE, 
	"SWAG_DUE" DATE, 
	"SWAG_COMPLETE" DATE, 
	"SWAG_NOTE" CLOB, 
	"GC_APPROVE_DATE" DATE, 
	"LOB_APPROVAL" NUMBER(10,0), 
	"QC_NUM" VARCHAR2(10 CHAR), 
	"PIR_85_DUE" DATE, 
	"PIR_100_DUE" DATE, 
	"SWAG_EXP" DATE, 
	"SWAG_LABOR" VARCHAR2(50 CHAR), 
	"SWAG_CAPITAL" VARCHAR2(50 CHAR), 
	"SWAG_VENDOR_IMPACT" CLOB, 
	"SWAG_RECURRING" VARCHAR2(50 CHAR), 
	"SWAG_DELIVERY" VARCHAR2(50 CHAR), 
	"SWAG_DELIVERY_TYPE" VARCHAR2(50 CHAR), 
	"SWAG_PROJ_DURATION" VARCHAR2(50 CHAR), 
	"SWAG_DETAILEDRESPONSE" VARCHAR2(255 CHAR), 
	"SWAG_MOD" VARCHAR2(255 CHAR), 
	"SIZING_DUE" DATE, 
	"KICKOFF_DATE" DATE, 
	"LEGACY_REQNUM" NUMBER(10,0), 
	"PILOT_REQUIRED" NUMBER(10,0), 
	"FUNDING_SOURCE" NUMBER(10,0), 
	"FUNDING_NUM" VARCHAR2(30 CHAR), 
	"INTAKE_INSCOPE" CLOB, 
	"INTAKE_ADDLSCOPE" CLOB, 
	"INTAKE_OUTOFSCOPE" CLOB, 
	"INTAKE_TEST_ENV" CLOB, 
	"INTAKE_NONSTNDRDTEST" CLOB, 
	"ISSUE_COUNT" NUMBER(10,0), 
	"STRAT_ADDED" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("STRAT_OBJECTIVES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("STRAT_BUS_JUST") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("STRAT_BENEFIT") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("STRAT_UPDATE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("EXEC_STATUS") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("PM_CHANGE_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("RISKS") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ISSUES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("GOTOGREEN") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("SHAREPOINT_LINK") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("TEST_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ANALYST_SUMMARY") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("SWAG_NOTE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("SWAG_VENDOR_IMPACT") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_INSCOPE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_ADDLSCOPE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_OUTOFSCOPE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_TEST_ENV") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_NONSTNDRDTEST") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table STRATEGIES_COPY
--------------------------------------------------------

  CREATE TABLE "STRATEGIES_COPY" 
   (	"STRAT_ID" NUMBER(10,0), 
	"STRAT_NAME" VARCHAR2(255 CHAR), 
	"STRAT_REQUESTOR" VARCHAR2(50 CHAR), 
	"STRAT_REQUESTOR_DEPT" VARCHAR2(50 CHAR), 
	"STRAT_REQ_BUS_AREA" VARCHAR2(50 CHAR), 
	"STRAT_OBJECTIVES" CLOB, 
	"STRAT_BUS_JUST" CLOB, 
	"STRAT_BENEFIT" CLOB, 
	"STRAT_ADDED_BY" VARCHAR2(15 CHAR), 
	"STRAT_STATUS_ID" NUMBER(10,0), 
	"STRAT_CATEGORY" NUMBER(10,0), 
	"STRAT_UPDATE" CLOB, 
	"STRAT" NUMBER(10,0), 
	"STRAT_COLOR" NUMBER(10,0), 
	"STRAT_STATUSDATE" DATE, 
	"START_DATE" DATE, 
	"TARGET_DATE" DATE, 
	"TARGET_FIRM" NUMBER(10,0), 
	"EXECVIEW" NUMBER(10,0), 
	"PRIORITYHIDE" NUMBER(10,0), 
	"APPLICATION" NUMBER(10,0), 
	"PROJ_REG" VARCHAR2(20 CHAR), 
	"CM_NUM" VARCHAR2(20 CHAR), 
	"CM_STATUS" VARCHAR2(20 CHAR), 
	"PET_NUM" VARCHAR2(20 CHAR), 
	"PARENT_CLARITY" VARCHAR2(20 CHAR), 
	"CHILD_CLARITY" VARCHAR2(20 CHAR), 
	"LOB_ID" NUMBER(10,0), 
	"EXEC_STATUS" CLOB, 
	"FUNDED" NUMBER(10,0), 
	"FUNDED_AMOUNT" NUMBER, 
	"FUNDING_TYPE" NUMBER(10,0), 
	"NEXUS_ID" VARCHAR2(20 CHAR), 
	"PM_CHANGE_NOTES" CLOB, 
	"GROUP_ID" NUMBER(10,0), 
	"RISKS" CLOB, 
	"ISSUES" CLOB, 
	"GOTOGREEN" CLOB, 
	"PROJUID" VARCHAR2(100 CHAR), 
	"SHAREPOINT_LINK" CLOB, 
	"TEST_NOTES" CLOB, 
	"GPPID" VARCHAR2(15 CHAR), 
	"RESOURCE_PLAN" NUMBER(10,0), 
	"PRIORITY_REQUEST" NUMBER(10,0), 
	"ANALYST_SUMMARY" CLOB, 
	"SWAG_REQ" DATE, 
	"SWAG_DUE" DATE, 
	"SWAG_COMPLETE" DATE, 
	"SWAG_NOTE" CLOB, 
	"GC_APPROVE_DATE" DATE, 
	"LOB_APPROVAL" NUMBER(10,0), 
	"GC_NUM" VARCHAR2(10 CHAR), 
	"PIR_85_DUE" DATE, 
	"PIR_100_DUE" DATE, 
	"SWAG_EXP" DATE, 
	"SWAG_LABOR" VARCHAR2(50 CHAR), 
	"SWAG_CAPITAL" VARCHAR2(50 CHAR), 
	"SWAG_VENDOR_IMPACT" CLOB, 
	"SWAG_RECURRING" VARCHAR2(50 CHAR), 
	"SWAG_DELIVERY" VARCHAR2(50 CHAR), 
	"SWAG_DELIVERY_TYPE" VARCHAR2(50 CHAR), 
	"SWAG_PROJ_DURATION" VARCHAR2(50 CHAR), 
	"SWAG_DETAILEDRESPONSE" VARCHAR2(255 CHAR), 
	"SWAG_MOD" VARCHAR2(255 CHAR), 
	"SIZING_DUE" DATE, 
	"KICKOFF_DATE" DATE, 
	"LEGACY_REQNUM" NUMBER(10,0), 
	"PILOT_REQUIRED" NUMBER(10,0), 
	"FUNDING_SOURCE" NUMBER(10,0), 
	"FUNDING_NUM" VARCHAR2(30 CHAR), 
	"INTAKE_INSCOPE" CLOB, 
	"INTAKE_ADDLSCOPE" CLOB, 
	"INTAKE_OUTOFSCOPE" CLOB, 
	"INTAKE_TEST_ENV" CLOB, 
	"INTAKE_NONSTNDRDTEST" CLOB, 
	"ISSUE_COUNT" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("STRAT_OBJECTIVES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("STRAT_BUS_JUST") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("STRAT_BENEFIT") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("STRAT_UPDATE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("EXEC_STATUS") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("PM_CHANGE_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("RISKS") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ISSUES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("GOTOGREEN") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("SHAREPOINT_LINK") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("TEST_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ANALYST_SUMMARY") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("SWAG_NOTE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("SWAG_VENDOR_IMPACT") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_INSCOPE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_ADDLSCOPE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_OUTOFSCOPE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_TEST_ENV") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTAKE_NONSTNDRDTEST") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table STRAT_CATEGORIES
--------------------------------------------------------

  CREATE TABLE "STRAT_CATEGORIES" 
   (	"STRAT_CAT_ID" NUMBER(10,0), 
	"STRAT_CAT_DESC" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_ESTIMATES
--------------------------------------------------------

  CREATE TABLE "STRAT_ESTIMATES" 
   (	"ESTIMATE_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"AREA_ID" NUMBER(10,0), 
	"ESTIMATE" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ESTIMATE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table STRAT_FUNDING
--------------------------------------------------------

  CREATE TABLE "STRAT_FUNDING" 
   (	"STRAT_ID" NUMBER(10,0), 
	"FUNDYEAR" NUMBER(10,0), 
	"ESTIMATE_GROUP" NUMBER(10,0), 
	"FUNAMOUNT" NUMBER(10,0), 
	"UPDATED" DATE, 
	"UPDATEDBY" VARCHAR2(12 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_HISTORY
--------------------------------------------------------

  CREATE TABLE "STRAT_HISTORY" 
   (	"HIST_ID" NUMBER(10,0), 
	"FDATE" DATE, 
	"USERID" VARCHAR2(15 CHAR), 
	"NEW_STATUS_ID" NUMBER(10,0), 
	"COMMENT_" CLOB, 
	"STRAT_ID" NUMBER(10,0), 
	"PUBLIC_" NUMBER(10,0), 
	"ANALYST_INCLUDE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("COMMENT_") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

--------------------------------------------------------
--  DDL for Table STRAT_ISSUES_RISKS
--------------------------------------------------------

  CREATE TABLE "STRAT_ISSUES_RISKS" 
   (	"ISSUE_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"STRAT_ISSUE_TYPE" NUMBER(10,0), 
	"STRAT_ISSUE_NUM" NUMBER(10,0), 
	"ISSUE_TITLE" VARCHAR2(255 CHAR), 
	"ISSUE_DESCRIPTION" CLOB, 
	"ISSUE_RAISED_BY" VARCHAR2(20 CHAR), 
	"ISSUE_STATUS_ID" NUMBER(10,0), 
	"ISSUE_ADDED" DATE, 
	"ISSUE_ADDED_BY" VARCHAR2(20 CHAR), 
	"ISSUE_NOTES" CLOB, 
	"ISSUE_ASSIGNEDTO" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("ISSUE_DESCRIPTION") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ISSUE_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table STRAT_ISSUES_RISKS_TYPES
--------------------------------------------------------

  CREATE TABLE "STRAT_ISSUES_RISKS_TYPES" 
   (	"STRAT_ISSUE_TYPE" NUMBER(10,0), 
	"STRAT_ISSUE_TYPE_DESC" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table STRAT_MEMBERS
--------------------------------------------------------

  CREATE TABLE "STRAT_MEMBERS" 
   (	"STRAT_ID" NUMBER(10,0), 
	"USERNAME" VARCHAR2(20 CHAR), 
	"ROLE_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_PHASES
--------------------------------------------------------

  CREATE TABLE "STRAT_PHASES" 
   (	"STRAT_PHASE_ID" NUMBER(10,0), 
	"STRAT_PHASE_DESC" VARCHAR2(50 CHAR), 
	"STRAT_PHASE_VISIBLE" NUMBER(10,0), 
	"STRAT_PHASE_DISPLAY_ORDER" NUMBER(10,0), 
	"DMAIC" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_PHASE_HISTORY
--------------------------------------------------------

  CREATE TABLE "STRAT_PHASE_HISTORY" 
   (	"STRAT_PHASE_HISTORY_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"STRAT_PHASE_ID" NUMBER(10,0), 
	"STRAT_PHASE_UPDATEDBY" VARCHAR2(15 CHAR), 
	"STRAT_PHASE_UPDATED" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_PRIORITY
--------------------------------------------------------

  CREATE TABLE "STRAT_PRIORITY" 
   (	"STRAT_ID" NUMBER(10,0), 
	"PRIORITY" NUMBER(10,0), 
	"LOB_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_PRIORITY_COPY
--------------------------------------------------------

  CREATE TABLE "STRAT_PRIORITY_COPY" 
   (	"STRAT_ID" NUMBER(10,0), 
	"PRIORITY" NUMBER(10,0), 
	"LOB_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table STRAT_PRIORITY_NIQ
--------------------------------------------------------

  CREATE TABLE "STRAT_PRIORITY_NIQ" 
   (	"STRAT_ID" NUMBER(10,0), 
	"PRIORITY" NUMBER(10,0), 
	"LOB_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_ROLES
--------------------------------------------------------

  CREATE TABLE "STRAT_ROLES" 
   (	"ROLE_ID" NUMBER(10,0), 
	"ROLE_DESC" VARCHAR2(35 CHAR), 
	"ROLE_SURVEY_EXCLUDE" NUMBER(10,0), 
	"ROLE_ABBR" VARCHAR2(10 CHAR), 
	"ROLE_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_ROLES_TO_ESTGRP
--------------------------------------------------------

  CREATE TABLE "STRAT_ROLES_TO_ESTGRP" 
   (	"ROLE_ID" NUMBER(10,0), 
	"ESTIMATE_GRP" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_STATUS
--------------------------------------------------------

  CREATE TABLE "STRAT_STATUS" 
   (	"STRAT_STATUS_ID" NUMBER(10,0), 
	"STRAT_STATUS_DESC" VARCHAR2(25 CHAR), 
	"STRAT_PROJ_REPORT" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table STRAT_STATUS_HISTORY
--------------------------------------------------------

  CREATE TABLE "STRAT_STATUS_HISTORY" 
   (	"STRAT_STATUSHISTORY_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"STATUS_CHANGEDATE" DATE, 
	"NEW_STATUS_ID" NUMBER(10,0), 
	"OLD_STATUS_ID" NUMBER(10,0), 
	"STATUS_CHANGED_BY" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_TASKS
--------------------------------------------------------

  CREATE TABLE "STRAT_TASKS" 
   (	"TASK_ID" NUMBER(38,0), 
	"STRAT_ID" NUMBER(10,0), 
	"TASK_DESC" CLOB, 
	"TASK_START" DATE, 
	"TASK_DUE" DATE, 
	"TASK_PERCENT" NUMBER(10,0), 
	"TASK_STATUS_ID" NUMBER(10,0), 
	"TASK_STAT_COLOR" NUMBER(10,0), 
	"TASK_TREND_COLOR" NUMBER(10,0), 
	"ASSIGNED_TO" VARCHAR2(10 CHAR), 
	"ASSIGNED_BY" VARCHAR2(10 CHAR), 
	"ADD_DATE" VARCHAR2(30 CHAR), 
	"LAST_UPDATE" VARCHAR2(30 CHAR), 
	"MILESTONE_ID" NUMBER(10,0), 
	"TASK_NOTES" CLOB, 
	"TASK_DURATION" NUMBER(10,0), 
	"STRAT_PHASE_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("TASK_DESC") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("TASK_NOTES") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table STRAT_TASK_STATUS
--------------------------------------------------------

  CREATE TABLE "STRAT_TASK_STATUS" 
   (	"TASK_STATUS_ID" NUMBER(10,0), 
	"TASK_STATUS_DESC" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_TO_COMPONENT
--------------------------------------------------------

  CREATE TABLE "STRAT_TO_COMPONENT" 
   (	"STRAT_ID" NUMBER(10,0), 
	"COMPONENT_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_TO_CONFIG
--------------------------------------------------------

  CREATE TABLE "STRAT_TO_CONFIG" 
   (	"STRAT_ID" NUMBER(10,0), 
	"CONFIG_ID" NUMBER(10,0), 
	"USERID" VARCHAR2(20 CHAR), 
	"ADDED" DATE, 
	"PIPELINE_PUSH" DATE, 
	"PUSHED_BY" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table STRAT_TO_GROUP
--------------------------------------------------------

  CREATE TABLE "STRAT_TO_GROUP" 
   (	"STRAT_ID" NUMBER(10,0), 
	"USERGROUP" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table STRAT_TO_INSTALL
--------------------------------------------------------

  CREATE TABLE "STRAT_TO_INSTALL" 
   (	"INSTALL_ID" NUMBER(10,0), 
	"STRAT_ID" NUMBER(10,0), 
	"LINK_DATE" DATE, 
	"LINK_BY" VARCHAR2(16 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table STRAT_TO_PRODUCT
--------------------------------------------------------

  CREATE TABLE "STRAT_TO_PRODUCT" 
   (	"STRAT_ID" NUMBER(10,0), 
	"PRODUCT_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table TASK_MILESTONES
--------------------------------------------------------

  CREATE TABLE "TASK_MILESTONES" 
   (	"MILESTONE_ID" NUMBER(10,0), 
	"MILESTONE_DESC" VARCHAR2(50 CHAR), 
	"MILESTONE_VISIBLE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table TECH_CMPNT_TO_EST_GROUP
--------------------------------------------------------

  CREATE TABLE "TECH_CMPNT_TO_EST_GROUP" 
   (	"COMPONENT_ID" NUMBER(10,0), 
	"ESTIMATE_GRP" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table TECH_COMPONENTS
--------------------------------------------------------

  CREATE TABLE "TECH_COMPONENTS" 
   (	"COMPONENT_ID" NUMBER(10,0), 
	"COMPONENT_NAME" VARCHAR2(30 CHAR), 
	"COMPONENT_VISIBLE" NUMBER(10,0), 
	"REPORTING_GROUP" NUMBER(10,0), 
	"INTAKE_GROUP_ID" NUMBER(10,0), 
	"COMPONENT_BUSINESS_NAME" VARCHAR2(30 CHAR), 
	"OWNER_USERID" VARCHAR2(12 CHAR), 
	"EXEC_GROUP_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table TEMPPRI
--------------------------------------------------------

  CREATE TABLE "TEMPPRI" 
   (	"STRAT_ID" NUMBER(10,0), 
	"PRIORITY" NUMBER(10,0), 
	"LOB_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table TESTTABL
--------------------------------------------------------

  CREATE TABLE "TESTTABL" 
   (	"TEST_ID" NUMBER(10,0), 
	"VALUEL" VARCHAR2(255 CHAR), 
	"VALUE2" VARCHAR2(255 CHAR), 
	"TTT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "USERS" 
   (	"USERID" VARCHAR2(8 CHAR), 
	"ALIAS" VARCHAR2(20 CHAR), 
	"PASS" VARCHAR2(90 CHAR), 
	"LASTCHG" VARCHAR2(30 CHAR), 
	"EMAIL" VARCHAR2(64 CHAR), 
	"DISPLAYNAME" VARCHAR2(35 CHAR), 
	"PHONE" CHAR(20 CHAR), 
	"ACTIVE" NUMBER(10,0), 
	"PROJ" NUMBER(10,0), 
	"RGU" NUMBER(10,0), 
	"IVG" NUMBER(10,0), 
	"ROLE_ID" VARCHAR2(255 CHAR), 
	"GROUP_ID" NUMBER(10,0), 
	"MGRID" VARCHAR2(10 CHAR), 
	"USERTYPE_ID" NUMBER(10,0), 
	"STARTDATE" DATE, 
	"BIRTHMONTH" NUMBER(10,0), 
	"FORECAST_AREA_ID" NUMBER(10,0), 
	"NICKNAME" VARCHAR2(25 CHAR), 
	"PHONE_HOME" VARCHAR2(20 CHAR), 
	"PHONE_CELL" VARCHAR2(20 CHAR), 
	"PAGER" VARCHAR2(35 CHAR), 
	"ADDITIONAL_CONTACT" VARCHAR2(50 CHAR), 
	"TECH_COMPONENT" NUMBER(10,0), 
	"PROJ_ROLE" NUMBER(10,0), 
	"WORKSTATION" VARCHAR2(100 CHAR), 
	"CONNECTION_KEY" VARCHAR2(100 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table USER_ALERTS
--------------------------------------------------------

  CREATE TABLE "USER_ALERTS" 
   (	"USERID" VARCHAR2(255 CHAR), 
	"ALERT_TYPE" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table USER_GROUPS
--------------------------------------------------------

  CREATE TABLE "USER_GROUPS" 
   (	"GROUP_ID" NUMBER(10,0), 
	"GROUP_DESC" VARCHAR2(25 CHAR), 
	"GRP_VISIBLE" NUMBER(10,0), 
	"GRP_LONGNAME" VARCHAR2(100 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table USER_HIDE_HOME
--------------------------------------------------------

  CREATE TABLE "USER_HIDE_HOME" 
   (	"USER_ID" VARCHAR2(25 CHAR), 
	"STRAT_ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;
--------------------------------------------------------
--  DDL for Table USER_TYPES
--------------------------------------------------------

  CREATE TABLE "USER_TYPES" 
   (	"USERTYPE_ID" NUMBER(10,0), 
	"USERTYPE_DESC" VARCHAR2(30 CHAR), 
	"USERTYPERATE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   ;

--------------------------------------------------------
--  DDL for Table WERFILES
--------------------------------------------------------

  CREATE TABLE "WERFILES" 
   (	"FILE_ID" VARCHAR2(255 CHAR), 
	"FILENOTE" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
   
 LOB ("FILENOTE") STORE AS SECUREFILE (
   ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
REM INSERTING into ACTIVITIES
SET DEFINE OFF;
REM INSERTING into ACTIVITY
SET DEFINE OFF;
REM INSERTING into ACTIVITY_CATEGORIES
SET DEFINE OFF;
REM INSERTING into ACTIVITY_CONTACTS
SET DEFINE OFF;
REM INSERTING into ACTIVITY_HISTORY
SET DEFINE OFF;
REM INSERTING into ACTIVITY_LOBS
SET DEFINE OFF;
REM INSERTING into ACTIVITY_STATUSES
SET DEFINE OFF;
REM INSERTING into ALERTS
SET DEFINE OFF;
REM INSERTING into AREAS
SET DEFINE OFF;
REM INSERTING into ARTIFACTS
SET DEFINE OFF;
REM INSERTING into ARTIFACT_TO_COMPONENT
SET DEFINE OFF;
REM INSERTING into ARTIFACT_TYPES
SET DEFINE OFF;
REM INSERTING into ARTIFACT_USERS
SET DEFINE OFF;
REM INSERTING into ATTACHMENTS
SET DEFINE OFF;
REM INSERTING into CALENDAR_HOLIDAY
SET DEFINE OFF;
REM INSERTING into CHANGE_REQUESTS
SET DEFINE OFF;
REM INSERTING into CHANGE_REQUESTS_STATUS
SET DEFINE OFF;
REM INSERTING into CONFIG_TYPES
SET DEFINE OFF;
REM INSERTING into CTI_PLANNING
SET DEFINE OFF;
REM INSERTING into DEV_PLANNING
SET DEFINE OFF;
REM INSERTING into ESTIMATES
SET DEFINE OFF;
REM INSERTING into ESTIMATE_ALLOCATIONS
SET DEFINE OFF;
REM INSERTING into ESTIMATE_BACKUP
SET DEFINE OFF;
REM INSERTING into ESTIMATE_GROUPS
SET DEFINE OFF;
REM INSERTING into ESTIMATE_GROUP_RATES
SET DEFINE OFF;
REM INSERTING into ESTIMATE_HIST
SET DEFINE OFF;
REM INSERTING into ESTIMATE_HISTORY
SET DEFINE OFF;
REM INSERTING into ESTIMATE_NOTIFY_EXCLUDE
SET DEFINE OFF;
REM INSERTING into ESTIMATE_PROJECT_OWNER
SET DEFINE OFF;
REM INSERTING into ESTIMATE_TYPES
SET DEFINE OFF;
REM INSERTING into EXEC_GROUPS
SET DEFINE OFF;
REM INSERTING into EXTERNAL_ACTIVITIES
SET DEFINE OFF;
REM INSERTING into FORECAST_AREAS
SET DEFINE OFF;
REM INSERTING into FORECAST_GROUPS
SET DEFINE OFF;
REM INSERTING into FORECAST_PROJECTS
SET DEFINE OFF;
REM INSERTING into FORECAST_PROJECT_STATUS
SET DEFINE OFF;
REM INSERTING into FORECAST_STATUSES
SET DEFINE OFF;
REM INSERTING into FORECAST_TEAMS
SET DEFINE OFF;
REM INSERTING into FORECAST_TIME
SET DEFINE OFF;
REM INSERTING into FORECAST_WEEKS
SET DEFINE OFF;
REM INSERTING into FUNDING_COMMITMENTS
SET DEFINE OFF;
REM INSERTING into FUNDING_SOURCES
SET DEFINE OFF;
REM INSERTING into FUNDING_TYPES
SET DEFINE OFF;
REM INSERTING into GROUP_INFO
SET DEFINE OFF;
REM INSERTING into INSTALLS
SET DEFINE OFF;
REM INSERTING into INSTALL_ENVIRONMENTS
SET DEFINE OFF;
REM INSERTING into INSTALL_HISTORY
SET DEFINE OFF;
REM INSERTING into INSTALL_ISSUES
SET DEFINE OFF;
REM INSERTING into INSTALL_ISSUE_COPY
SET DEFINE OFF;
REM INSERTING into INSTALL_MILESTONES
SET DEFINE OFF;
REM INSERTING into INSTALL_STATUSES
SET DEFINE OFF;
REM INSERTING into INSTALL_TASKS
SET DEFINE OFF;
REM INSERTING into INSTALL_TYPES
SET DEFINE OFF;
REM INSERTING into INST_MILESTONE_TYPES
SET DEFINE OFF;
REM INSERTING into INTAKE_TECH_COMPONENT_GROUPING
SET DEFINE OFF;
REM INSERTING into LOBS
SET DEFINE OFF;
REM INSERTING into NOTES
SET DEFINE OFF;
REM INSERTING into NOTIFY_REPORTS
SET DEFINE OFF;
REM INSERTING into ONCALL
SET DEFINE OFF;
REM INSERTING into ONCALL_COVERAGE
SET DEFINE OFF;
REM INSERTING into ORGANIZATIONS
SET DEFINE OFF;
REM INSERTING into PILLARS
SET DEFINE OFF;
REM INSERTING into PORTAL_CONFIG
SET DEFINE OFF;
REM INSERTING into PRODUCTS
SET DEFINE OFF;
REM INSERTING into REPORTFILTERS
SET DEFINE OFF;
REM INSERTING into REPORT_SUBSCRIPTIONS
SET DEFINE OFF;
REM INSERTING into RESOURCEPLANNING
SET DEFINE OFF;
REM INSERTING into ROLE_ACCESS
SET DEFINE OFF;
REM INSERTING into SCOPE_ITEMS
SET DEFINE OFF;
REM INSERTING into SIZE_DATE
SET DEFINE OFF;
REM INSERTING into SIZING_DEF
SET DEFINE OFF;
REM INSERTING into STATUS
SET DEFINE OFF;
REM INSERTING into STRATEGIES
SET DEFINE OFF;
REM INSERTING into STRATEGIES_COPY
SET DEFINE OFF;
REM INSERTING into STRAT_CATEGORIES
SET DEFINE OFF;
REM INSERTING into STRAT_ESTIMATES
SET DEFINE OFF;
REM INSERTING into STRAT_FUNDING
SET DEFINE OFF;
REM INSERTING into STRAT_HISTORY
SET DEFINE OFF;
REM INSERTING into STRAT_ISSUES_RISKS
SET DEFINE OFF;
REM INSERTING into STRAT_ISSUES_RISKS_TYPES
SET DEFINE OFF;
REM INSERTING into STRAT_MEMBERS
SET DEFINE OFF;
REM INSERTING into STRAT_PHASES
SET DEFINE OFF;
REM INSERTING into STRAT_PHASE_HISTORY
SET DEFINE OFF;
REM INSERTING into STRAT_PRIORITY
SET DEFINE OFF;
REM INSERTING into STRAT_PRIORITY_COPY
SET DEFINE OFF;
REM INSERTING into STRAT_PRIORITY_NIQ
SET DEFINE OFF;
REM INSERTING into STRAT_ROLES
SET DEFINE OFF;
REM INSERTING into STRAT_ROLES_TO_ESTGRP
SET DEFINE OFF;
REM INSERTING into STRAT_STATUS
SET DEFINE OFF;
REM INSERTING into STRAT_STATUS_HISTORY
SET DEFINE OFF;
REM INSERTING into STRAT_TASKS
SET DEFINE OFF;
REM INSERTING into STRAT_TASK_STATUS
SET DEFINE OFF;
REM INSERTING into STRAT_TO_COMPONENT
SET DEFINE OFF;
REM INSERTING into STRAT_TO_CONFIG
SET DEFINE OFF;
REM INSERTING into STRAT_TO_GROUP
SET DEFINE OFF;
REM INSERTING into STRAT_TO_INSTALL
SET DEFINE OFF;
REM INSERTING into STRAT_TO_PRODUCT
SET DEFINE OFF;
REM INSERTING into TASK_MILESTONES
SET DEFINE OFF;
REM INSERTING into TECH_CMPNT_TO_EST_GROUP
SET DEFINE OFF;
REM INSERTING into TECH_COMPONENTS
SET DEFINE OFF;
REM INSERTING into TEMPPRI
SET DEFINE OFF;
REM INSERTING into TESTTABL
SET DEFINE OFF;
REM INSERTING into USERS
SET DEFINE OFF;
REM INSERTING into USER_ALERTS
SET DEFINE OFF;
REM INSERTING into USER_GROUPS
SET DEFINE OFF;
REM INSERTING into USER_HIDE_HOME
SET DEFINE OFF;
REM INSERTING into USER_TYPES
SET DEFINE OFF;
REM INSERTING into WERFILES
SET DEFINE OFF;
--------------------------------------------------------
--  Constraints for Table FUNDING_TYPES
--------------------------------------------------------

  ALTER TABLE "FUNDING_TYPES" MODIFY ("FUND_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table CTI_PLANNING
--------------------------------------------------------

  ALTER TABLE "CTI_PLANNING" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "CTI_PLANNING" MODIFY ("CTI_MONTH" NOT NULL ENABLE);
  ALTER TABLE "CTI_PLANNING" MODIFY ("CTI_YEAR" NOT NULL ENABLE);
  ALTER TABLE "CTI_PLANNING" MODIFY ("CTI_HOURS" NOT NULL ENABLE);
  ALTER TABLE "CTI_PLANNING" MODIFY ("ESTIMATE_GRP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EXEC_GROUPS
--------------------------------------------------------

  ALTER TABLE "EXEC_GROUPS" MODIFY ("EXEC_GROUP_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_ESTIMATES
--------------------------------------------------------

  ALTER TABLE "STRAT_ESTIMATES" MODIFY ("ESTIMATE_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_ESTIMATES" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_ESTIMATES" MODIFY ("AREA_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INSTALL_ISSUES
--------------------------------------------------------

  ALTER TABLE "INSTALL_ISSUES" MODIFY ("INSTALL_ISSUE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ALERTS
--------------------------------------------------------

  ALTER TABLE "ALERTS" MODIFY ("ALERT_TYPE" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRATEGIES
--------------------------------------------------------

  ALTER TABLE "STRATEGIES" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRATEGIES" MODIFY ("STRAT_REQUESTOR" NOT NULL ENABLE);
  ALTER TABLE "STRATEGIES" MODIFY ("STRAT_ADDED_BY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRAT_TO_PRODUCT
--------------------------------------------------------

  ALTER TABLE "STRAT_TO_PRODUCT" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TO_PRODUCT" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table CHANGE_REQUESTS_STATUS
--------------------------------------------------------

  ALTER TABLE "CHANGE_REQUESTS_STATUS" MODIFY ("CR_STATUS" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FORECAST_PROJECTS
--------------------------------------------------------

  ALTER TABLE "FORECAST_PROJECTS" MODIFY ("FUNDING_ID" NOT NULL ENABLE);
  ALTER TABLE "FORECAST_PROJECTS" MODIFY ("PROJ_GROUP" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_PRIORITY_COPY
--------------------------------------------------------

  ALTER TABLE "STRAT_PRIORITY_COPY" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_PRIORITY_COPY" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "STRAT_PRIORITY_COPY" MODIFY ("LOB_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRAT_ROLES
--------------------------------------------------------

  ALTER TABLE "STRAT_ROLES" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_ROLES" MODIFY ("ROLE_DESC" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ARTIFACT_TYPES
--------------------------------------------------------

  ALTER TABLE "ARTIFACT_TYPES" MODIFY ("ARTIFACT_TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "ARTIFACT_TYPES" MODIFY ("ARTIFACT_TYPE_DESC" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_HIST
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_HIST" MODIFY ("ESTIMATE_HIST_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table GROUP_INFO
--------------------------------------------------------

  ALTER TABLE "GROUP_INFO" MODIFY ("GROUP_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "PRODUCTS" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);
  ALTER TABLE "PRODUCTS" MODIFY ("PRODUCT_NAME" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ARTIFACT_USERS
--------------------------------------------------------

  ALTER TABLE "ARTIFACT_USERS" MODIFY ("ARTIFACT_ID" NOT NULL ENABLE);
  ALTER TABLE "ARTIFACT_USERS" MODIFY ("ARTIFACT_USER" NOT NULL ENABLE);
  ALTER TABLE "ARTIFACT_USERS" MODIFY ("ARTIFACT_ROLE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ATTACHMENTS
--------------------------------------------------------

  ALTER TABLE "ATTACHMENTS" MODIFY ("ATTACH_ID" NOT NULL ENABLE);
  ALTER TABLE "ATTACHMENTS" MODIFY ("ATTACH_TYPE" NOT NULL ENABLE);
  ALTER TABLE "ATTACHMENTS" MODIFY ("REF_ID" NOT NULL ENABLE);
  ALTER TABLE "ATTACHMENTS" MODIFY ("FILE_DESC" NOT NULL ENABLE);
  ALTER TABLE "ATTACHMENTS" MODIFY ("VISIBLE" NOT NULL ENABLE);
  ALTER TABLE "ATTACHMENTS" MODIFY ("ADDEDBY" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_ISSUES_RISKS
--------------------------------------------------------

  ALTER TABLE "STRAT_ISSUES_RISKS" MODIFY ("ISSUE_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_ISSUES_RISKS" MODIFY ("STRAT_ISSUE_TYPE" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_PRIORITY_NIQ
--------------------------------------------------------

  ALTER TABLE "STRAT_PRIORITY_NIQ" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_PRIORITY_NIQ" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "STRAT_PRIORITY_NIQ" MODIFY ("LOB_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRAT_STATUS
--------------------------------------------------------

  ALTER TABLE "STRAT_STATUS" MODIFY ("STRAT_STATUS_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table TASK_MILESTONES
--------------------------------------------------------

  ALTER TABLE "TASK_MILESTONES" MODIFY ("MILESTONE_ID" NOT NULL ENABLE);
  ALTER TABLE "TASK_MILESTONES" MODIFY ("MILESTONE_DESC" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ARTIFACT_TO_COMPONENT
--------------------------------------------------------

  ALTER TABLE "ARTIFACT_TO_COMPONENT" MODIFY ("ARTIFACT_ID" NOT NULL ENABLE);
  ALTER TABLE "ARTIFACT_TO_COMPONENT" MODIFY ("COMPONENT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ROLE_ACCESS
--------------------------------------------------------

  ALTER TABLE "ROLE_ACCESS" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "ROLE_ACCESS" MODIFY ("ROLE_DESC" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table USER_ALERTS
--------------------------------------------------------

  ALTER TABLE "USER_ALERTS" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "USER_ALERTS" MODIFY ("ALERT_TYPE" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FUNDING_COMMITMENTS
--------------------------------------------------------

  ALTER TABLE "FUNDING_COMMITMENTS" MODIFY ("FUNDING_ID" NOT NULL ENABLE);
  ALTER TABLE "FUNDING_COMMITMENTS" MODIFY ("FUNDING_YEAR" NOT NULL ENABLE);
  ALTER TABLE "FUNDING_COMMITMENTS" MODIFY ("FORECAST_AREA_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_PHASE_HISTORY
--------------------------------------------------------

  ALTER TABLE "STRAT_PHASE_HISTORY" MODIFY ("STRAT_PHASE_HISTORY_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ONCALL
--------------------------------------------------------

  ALTER TABLE "ONCALL" MODIFY ("COVERAGE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_TASKS
--------------------------------------------------------

  ALTER TABLE "STRAT_TASKS" MODIFY ("TASK_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TASKS" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TASKS" MODIFY ("TASK_DESC" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TASKS" MODIFY ("TASK_DUE" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TASKS" MODIFY ("TASK_PERCENT" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TASKS" MODIFY ("TASK_STATUS_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TASKS" MODIFY ("ASSIGNED_TO" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TASKS" MODIFY ("ASSIGNED_BY" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TASKS" MODIFY ("ADD_DATE" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ACTIVITY_STATUSES
--------------------------------------------------------

  ALTER TABLE "ACTIVITY_STATUSES" MODIFY ("ACTIVITY_STATUS_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FORECAST_STATUSES
--------------------------------------------------------

  ALTER TABLE "FORECAST_STATUSES" MODIFY ("STATUS_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FORECAST_TIME
--------------------------------------------------------

  ALTER TABLE "FORECAST_TIME" MODIFY ("WEEKID" NOT NULL ENABLE);
  ALTER TABLE "FORECAST_TIME" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "FORECAST_TIME" MODIFY ("PROJECT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_MEMBERS
--------------------------------------------------------

  ALTER TABLE "STRAT_MEMBERS" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_MEMBERS" MODIFY ("USERNAME" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_PRIORITY
--------------------------------------------------------

  ALTER TABLE "STRAT_PRIORITY" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_PRIORITY" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "STRAT_PRIORITY" MODIFY ("LOB_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ACTIVITY_CATEGORIES
--------------------------------------------------------

  ALTER TABLE "ACTIVITY_CATEGORIES" MODIFY ("ACTIVITY_CATEGORY_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FORECAST_TEAMS
--------------------------------------------------------

  ALTER TABLE "FORECAST_TEAMS" MODIFY ("FUNDING_ID" NOT NULL ENABLE);
  ALTER TABLE "FORECAST_TEAMS" MODIFY ("USERID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table RESOURCEPLANNING
--------------------------------------------------------

  ALTER TABLE "RESOURCEPLANNING" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "RESOURCEPLANNING" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "RESOURCEPLANNING" MODIFY ("WEEK_START" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRAT_ISSUES_RISKS_TYPES
--------------------------------------------------------

  ALTER TABLE "STRAT_ISSUES_RISKS_TYPES" MODIFY ("STRAT_ISSUE_TYPE" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_TO_GROUP
--------------------------------------------------------

  ALTER TABLE "STRAT_TO_GROUP" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TO_GROUP" MODIFY ("USERGROUP" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table TECH_COMPONENTS
--------------------------------------------------------

  ALTER TABLE "TECH_COMPONENTS" MODIFY ("COMPONENT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table USER_HIDE_HOME
--------------------------------------------------------

  ALTER TABLE "USER_HIDE_HOME" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_HIDE_HOME" MODIFY ("STRAT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table NOTES
--------------------------------------------------------

  ALTER TABLE "NOTES" MODIFY ("NOTE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ONCALL_COVERAGE
--------------------------------------------------------

  ALTER TABLE "ONCALL_COVERAGE" MODIFY ("COVERAGETYPE" NOT NULL ENABLE);
  ALTER TABLE "ONCALL_COVERAGE" MODIFY ("COVERAGE_DESC" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_PHASES
--------------------------------------------------------

  ALTER TABLE "STRAT_PHASES" MODIFY ("STRAT_PHASE_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_PHASES" MODIFY ("STRAT_PHASE_DESC" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table USER_TYPES
--------------------------------------------------------

  ALTER TABLE "USER_TYPES" MODIFY ("USERTYPE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FORECAST_AREAS
--------------------------------------------------------

  ALTER TABLE "FORECAST_AREAS" MODIFY ("FORECAST_AREA_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INSTALL_MILESTONES
--------------------------------------------------------

  ALTER TABLE "INSTALL_MILESTONES" MODIFY ("INST_MILE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INSTALL_TYPES
--------------------------------------------------------

  ALTER TABLE "INSTALL_TYPES" MODIFY ("INSTALL_TYPE" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ORGANIZATIONS
--------------------------------------------------------

  ALTER TABLE "ORGANIZATIONS" MODIFY ("ORG_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table CONFIG_TYPES
--------------------------------------------------------

  ALTER TABLE "CONFIG_TYPES" MODIFY ("CONFIG_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table DEV_PLANNING
--------------------------------------------------------

  ALTER TABLE "DEV_PLANNING" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_PLANNING" MODIFY ("DEV_MONTH" NOT NULL ENABLE);
  ALTER TABLE "DEV_PLANNING" MODIFY ("DEV_YEAR" NOT NULL ENABLE);
  ALTER TABLE "DEV_PLANNING" MODIFY ("DEV_USER" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INSTALLS
--------------------------------------------------------

  ALTER TABLE "INSTALLS" MODIFY ("INSTALL_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table TECH_CMPNT_TO_EST_GROUP
--------------------------------------------------------

  ALTER TABLE "TECH_CMPNT_TO_EST_GROUP" MODIFY ("COMPONENT_ID" NOT NULL ENABLE);
  ALTER TABLE "TECH_CMPNT_TO_EST_GROUP" MODIFY ("ESTIMATE_GRP" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_HISTORY
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_HISTORY" MODIFY ("ESTIMATE_HISTORY_ID" NOT NULL ENABLE);
  ALTER TABLE "ESTIMATE_HISTORY" MODIFY ("ESTIMATE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FORECAST_WEEKS
--------------------------------------------------------

  ALTER TABLE "FORECAST_WEEKS" MODIFY ("WEEKID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ACTIVITY_HISTORY
--------------------------------------------------------

  ALTER TABLE "ACTIVITY_HISTORY" MODIFY ("ACTIVITY_HIST_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table CHANGE_REQUESTS
--------------------------------------------------------

  ALTER TABLE "CHANGE_REQUESTS" MODIFY ("CR_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_ALLOCATIONS
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_ALLOCATIONS" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "ESTIMATE_ALLOCATIONS" MODIFY ("LOB_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INSTALL_ISSUE_COPY
--------------------------------------------------------

  ALTER TABLE "INSTALL_ISSUE_COPY" MODIFY ("INSTALL_ISSUE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table PORTAL_CONFIG
--------------------------------------------------------

  ALTER TABLE "PORTAL_CONFIG" MODIFY ("CONFIG_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ACTIVITIES
--------------------------------------------------------

  ALTER TABLE "ACTIVITIES" MODIFY ("ACTIVITY_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table CALENDAR_HOLIDAY
--------------------------------------------------------

  ALTER TABLE "CALENDAR_HOLIDAY" MODIFY ("HOLIDAY_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table REPORT_SUBSCRIPTIONS
--------------------------------------------------------

  ALTER TABLE "REPORT_SUBSCRIPTIONS" MODIFY ("EMAIL_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "REPORT_SUBSCRIPTIONS" MODIFY ("REPORT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table SIZING_DEF
--------------------------------------------------------

  ALTER TABLE "SIZING_DEF" MODIFY ("SIZE_ID" NOT NULL ENABLE);
  ALTER TABLE "SIZING_DEF" MODIFY ("SIZE_DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "SIZING_DEF" MODIFY ("SIZE_MONEY_LOW" NOT NULL ENABLE);
  ALTER TABLE "SIZING_DEF" MODIFY ("SIZE_MONEY_HIGH" NOT NULL ENABLE);
  ALTER TABLE "SIZING_DEF" MODIFY ("SIZE_DURATION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRAT_HISTORY
--------------------------------------------------------

  ALTER TABLE "STRAT_HISTORY" MODIFY ("HIST_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_HISTORY" MODIFY ("STRAT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_ROLES_TO_ESTGRP
--------------------------------------------------------

  ALTER TABLE "STRAT_ROLES_TO_ESTGRP" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_ROLES_TO_ESTGRP" MODIFY ("ESTIMATE_GRP" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_TASK_STATUS
--------------------------------------------------------

  ALTER TABLE "STRAT_TASK_STATUS" MODIFY ("TASK_STATUS_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_GROUPS
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_GROUPS" MODIFY ("ESTIMATE_GRP" NOT NULL ENABLE);
  ALTER TABLE "ESTIMATE_GROUPS" MODIFY ("GROUP_NAME" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FORECAST_PROJECT_STATUS
--------------------------------------------------------

  ALTER TABLE "FORECAST_PROJECT_STATUS" MODIFY ("PROJ_STATUS_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INSTALL_STATUSES
--------------------------------------------------------

  ALTER TABLE "INSTALL_STATUSES" MODIFY ("INSTALL_STATUS_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_FUNDING
--------------------------------------------------------

  ALTER TABLE "STRAT_FUNDING" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_FUNDING" MODIFY ("FUNDYEAR" NOT NULL ENABLE);
  ALTER TABLE "STRAT_FUNDING" MODIFY ("ESTIMATE_GROUP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRATEGIES_COPY
--------------------------------------------------------

  ALTER TABLE "STRATEGIES_COPY" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRATEGIES_COPY" MODIFY ("STRAT_REQUESTOR" NOT NULL ENABLE);
  ALTER TABLE "STRATEGIES_COPY" MODIFY ("STRAT_ADDED_BY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRAT_CATEGORIES
--------------------------------------------------------

  ALTER TABLE "STRAT_CATEGORIES" MODIFY ("STRAT_CAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_CATEGORIES" MODIFY ("STRAT_CAT_DESC" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table NOTIFY_REPORTS
--------------------------------------------------------

  ALTER TABLE "NOTIFY_REPORTS" MODIFY ("REPORT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table SCOPE_ITEMS
--------------------------------------------------------

  ALTER TABLE "SCOPE_ITEMS" MODIFY ("SCOPE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table TEMPPRI
--------------------------------------------------------

  ALTER TABLE "TEMPPRI" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "TEMPPRI" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "TEMPPRI" MODIFY ("LOB_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_GROUP_RATES
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_GROUP_RATES" MODIFY ("ESTIMATE_GRP" NOT NULL ENABLE);
  ALTER TABLE "ESTIMATE_GROUP_RATES" MODIFY ("RATEYEAR" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_NOTIFY_EXCLUDE
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_NOTIFY_EXCLUDE" MODIFY ("USERID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FUNDING_SOURCES
--------------------------------------------------------

  ALTER TABLE "FUNDING_SOURCES" MODIFY ("FUNDING_SRC_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INSTALL_ENVIRONMENTS
--------------------------------------------------------

  ALTER TABLE "INSTALL_ENVIRONMENTS" MODIFY ("INST_ENV_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INTAKE_TECH_COMPONENT_GROUPING
--------------------------------------------------------

  ALTER TABLE "INTAKE_TECH_COMPONENT_GROUPING" MODIFY ("INTAKE_GROUP_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ARTIFACTS
--------------------------------------------------------

  ALTER TABLE "ARTIFACTS" MODIFY ("ARTIFACT_ID" NOT NULL ENABLE);
  ALTER TABLE "ARTIFACTS" MODIFY ("ARTIFACT_LINK" NOT NULL ENABLE);
  ALTER TABLE "ARTIFACTS" MODIFY ("ARTIFACT_ADDED" NOT NULL ENABLE);
  ALTER TABLE "ARTIFACTS" MODIFY ("ARTIFACT_DUE" NOT NULL ENABLE);
  ALTER TABLE "ARTIFACTS" MODIFY ("STRAT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table FORECAST_GROUPS
--------------------------------------------------------

  ALTER TABLE "FORECAST_GROUPS" MODIFY ("PROJ_GROUP" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table PILLARS
--------------------------------------------------------

  ALTER TABLE "PILLARS" MODIFY ("PILLAR_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_STATUS_HISTORY
--------------------------------------------------------

  ALTER TABLE "STRAT_STATUS_HISTORY" MODIFY ("STRAT_STATUSHISTORY_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRAT_TO_CONFIG
--------------------------------------------------------

  ALTER TABLE "STRAT_TO_CONFIG" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TO_CONFIG" MODIFY ("CONFIG_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INSTALL_TASKS
--------------------------------------------------------

  ALTER TABLE "INSTALL_TASKS" MODIFY ("TASK_ID" NOT NULL ENABLE);
  ALTER TABLE "INSTALL_TASKS" MODIFY ("INSTALL_ID" NOT NULL ENABLE);
  ALTER TABLE "INSTALL_TASKS" MODIFY ("TASK_DESC" NOT NULL ENABLE);
  ALTER TABLE "INSTALL_TASKS" MODIFY ("TASK_DUE" NOT NULL ENABLE);
  ALTER TABLE "INSTALL_TASKS" MODIFY ("TASK_PERCENT" NOT NULL ENABLE);
  ALTER TABLE "INSTALL_TASKS" MODIFY ("TASK_STATUS_ID" NOT NULL ENABLE);
  ALTER TABLE "INSTALL_TASKS" MODIFY ("ASSIGNED_TO" NOT NULL ENABLE);
  ALTER TABLE "INSTALL_TASKS" MODIFY ("ASSIGNED_BY" NOT NULL ENABLE);
  ALTER TABLE "INSTALL_TASKS" MODIFY ("ADD_DATE" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table REPORTFILTERS
--------------------------------------------------------

  ALTER TABLE "REPORTFILTERS" MODIFY ("FILTER_ID" NOT NULL ENABLE);
  ALTER TABLE "REPORTFILTERS" MODIFY ("USERID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ACTIVITY
--------------------------------------------------------

  ALTER TABLE "ACTIVITY" MODIFY ("ACTIVITY_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ACTIVITY_CONTACTS
--------------------------------------------------------

  ALTER TABLE "ACTIVITY_CONTACTS" MODIFY ("ACTIVITY_CONTACT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_BACKUP
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_BACKUP" MODIFY ("ESTIMATE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table SIZE_DATE
--------------------------------------------------------

  ALTER TABLE "SIZE_DATE" MODIFY ("SIZE_REF" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table USER_GROUPS
--------------------------------------------------------

  ALTER TABLE "USER_GROUPS" MODIFY ("GROUP_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATES
--------------------------------------------------------

  ALTER TABLE "ESTIMATES" MODIFY ("ESTIMATE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_PROJECT_OWNER
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_PROJECT_OWNER" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "ESTIMATE_PROJECT_OWNER" MODIFY ("EST_GROUP_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table WERFILES
--------------------------------------------------------

  ALTER TABLE "WERFILES" MODIFY ("FILE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STATUS
--------------------------------------------------------

  ALTER TABLE "STATUS" MODIFY ("STATUS_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_TO_INSTALL
--------------------------------------------------------

  ALTER TABLE "STRAT_TO_INSTALL" MODIFY ("INSTALL_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TO_INSTALL" MODIFY ("STRAT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table LOBS
--------------------------------------------------------

  ALTER TABLE "LOBS" MODIFY ("LOB_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ESTIMATE_TYPES
--------------------------------------------------------

  ALTER TABLE "ESTIMATE_TYPES" MODIFY ("ESTIMATE_TYPE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table STRAT_TO_COMPONENT
--------------------------------------------------------

  ALTER TABLE "STRAT_TO_COMPONENT" MODIFY ("STRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STRAT_TO_COMPONENT" MODIFY ("COMPONENT_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "USERS" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("PASS" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("DISPLAYNAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EXTERNAL_ACTIVITIES
--------------------------------------------------------

  ALTER TABLE "EXTERNAL_ACTIVITIES" MODIFY ("ACTIVITY_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INSTALL_HISTORY
--------------------------------------------------------

  ALTER TABLE "INSTALL_HISTORY" MODIFY ("HIST_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INST_MILESTONE_TYPES
--------------------------------------------------------

  ALTER TABLE "INST_MILESTONE_TYPES" MODIFY ("INST_MILESTONE_TYPE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table ACTIVITY_LOBS
--------------------------------------------------------

  ALTER TABLE "ACTIVITY_LOBS" MODIFY ("ACTIVITY_ID" NOT NULL ENABLE);
  ALTER TABLE "ACTIVITY_LOBS" MODIFY ("ACTIVITY_LOB_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table AREAS
--------------------------------------------------------

  ALTER TABLE "AREAS" MODIFY ("AREA_ID" NOT NULL ENABLE);
  ALTER TABLE "AREAS" MODIFY ("AREA_DESC" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table TESTTABL
--------------------------------------------------------

  ALTER TABLE "TESTTABL" MODIFY ("TEST_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  DDL for Trigger ACTIVITIES_ACTIVITY_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ACTIVITIES_ACTIVITY_ID_TRIG" BEFORE INSERT OR UPDATE ON activities
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.activity_id IS NULL THEN
    SELECT  activities_activity_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(activity_id),0) INTO v_newVal FROM activities;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT activities_activity_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.activity_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ACTIVITIES_ACTIVITY_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ACTIVITY_ACTIVITY_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ACTIVITY_ACTIVITY_ID_TRIG" BEFORE INSERT OR UPDATE ON activity
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.activity_id IS NULL THEN
    SELECT  activity_activity_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(activity_id),0) INTO v_newVal FROM activity;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT activity_activity_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.activity_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ACTIVITY_ACTIVITY_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ACTIVITY_CATEGORIES_ACTIV_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ACTIVITY_CATEGORIES_ACTIV_TRIG" BEFORE INSERT OR UPDATE ON activity_categories
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.activity_category_id IS NULL THEN
    SELECT  activity_categories_activi_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(activity_category_id),0) INTO v_newVal FROM activity_categories;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT activity_categories_activi_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.activity_category_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ACTIVITY_CATEGORIES_ACTIV_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ACTIVITY_CONTACTS_ACTIVIT_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ACTIVITY_CONTACTS_ACTIVIT_TRIG" BEFORE INSERT OR UPDATE ON activity_contacts
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.activity_contact_id IS NULL THEN
    SELECT  activity_contacts_activity_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(activity_contact_id),0) INTO v_newVal FROM activity_contacts;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT activity_contacts_activity_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.activity_contact_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ACTIVITY_CONTACTS_ACTIVIT_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ACTIVITY_HISTORY_ACTIVITY_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ACTIVITY_HISTORY_ACTIVITY_TRIG" BEFORE INSERT OR UPDATE ON activity_history
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.activity_hist_id IS NULL THEN
    SELECT  activity_history_activity__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(activity_hist_id),0) INTO v_newVal FROM activity_history;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT activity_history_activity__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.activity_hist_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ACTIVITY_HISTORY_ACTIVITY_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ACTIVITY_STATUSES_ACTIVIT_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ACTIVITY_STATUSES_ACTIVIT_TRIG" BEFORE INSERT OR UPDATE ON activity_statuses
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.activity_status_id IS NULL THEN
    SELECT  activity_statuses_activity_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(activity_status_id),0) INTO v_newVal FROM activity_statuses;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT activity_statuses_activity_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.activity_status_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ACTIVITY_STATUSES_ACTIVIT_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ALERTS_ALERT_TYPE_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ALERTS_ALERT_TYPE_TRIG" BEFORE INSERT OR UPDATE ON alerts
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.alert_type IS NULL THEN
    SELECT  alerts_alert_type_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(alert_type),0) INTO v_newVal FROM alerts;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT alerts_alert_type_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.alert_type := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ALERTS_ALERT_TYPE_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AREAS_AREA_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "AREAS_AREA_ID_TRIG" BEFORE INSERT OR UPDATE ON areas
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.area_id IS NULL THEN
    SELECT  areas_area_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(area_id),0) INTO v_newVal FROM areas;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT areas_area_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.area_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "AREAS_AREA_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ARTIFACTS_ARTIFACT_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ARTIFACTS_ARTIFACT_ID_TRIG" BEFORE INSERT OR UPDATE ON artifacts
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.artifact_id IS NULL THEN
    SELECT  artifacts_artifact_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(artifact_id),0) INTO v_newVal FROM artifacts;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT artifacts_artifact_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.artifact_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ARTIFACTS_ARTIFACT_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ARTIFACT_TYPES_ARTIFACT_T_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ARTIFACT_TYPES_ARTIFACT_T_TRIG" BEFORE INSERT OR UPDATE ON artifact_types
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.artifact_type_id IS NULL THEN
    SELECT  artifact_types_artifact_ty_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(artifact_type_id),0) INTO v_newVal FROM artifact_types;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT artifact_types_artifact_ty_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.artifact_type_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ARTIFACT_TYPES_ARTIFACT_T_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ATTACHMENTS_ATTACH_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ATTACHMENTS_ATTACH_ID_TRIG" BEFORE INSERT OR UPDATE ON attachments
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.attach_id IS NULL THEN
    SELECT  attachments_attach_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(attach_id),0) INTO v_newVal FROM attachments;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT attachments_attach_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.attach_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ATTACHMENTS_ATTACH_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger CALENDAR_HOLIDAY_HOLIDAY__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "CALENDAR_HOLIDAY_HOLIDAY__TRIG" BEFORE INSERT OR UPDATE ON calendar_holiday
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.holiday_id IS NULL THEN
    SELECT  calendar_holiday_holiday_i_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(holiday_id),0) INTO v_newVal FROM calendar_holiday;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT calendar_holiday_holiday_i_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.holiday_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "CALENDAR_HOLIDAY_HOLIDAY__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger CHANGE_REQUESTS_CR_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "CHANGE_REQUESTS_CR_ID_TRIG" BEFORE INSERT OR UPDATE ON change_requests
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.cr_id IS NULL THEN
    SELECT  change_requests_cr_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(cr_id),0) INTO v_newVal FROM change_requests;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT change_requests_cr_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.cr_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "CHANGE_REQUESTS_CR_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger CHANGE_REQUESTS_STATUS_CR_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "CHANGE_REQUESTS_STATUS_CR_TRIG" BEFORE INSERT OR UPDATE ON change_requests_status
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.cr_status IS NULL THEN
    SELECT  change_requests_status_cr__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(cr_status),0) INTO v_newVal FROM change_requests_status;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT change_requests_status_cr__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.cr_status := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "CHANGE_REQUESTS_STATUS_CR_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger CONFIG_TYPES_CONFIG_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "CONFIG_TYPES_CONFIG_ID_TRIG" BEFORE INSERT OR UPDATE ON config_types
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.config_id IS NULL THEN
    SELECT  config_types_config_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(config_id),0) INTO v_newVal FROM config_types;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT config_types_config_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.config_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "CONFIG_TYPES_CONFIG_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ESTIMATES_ESTIMATE_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ESTIMATES_ESTIMATE_ID_TRIG" BEFORE INSERT OR UPDATE ON estimates
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.estimate_id IS NULL THEN
    SELECT  estimates_estimate_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(estimate_id),0) INTO v_newVal FROM estimates;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT estimates_estimate_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.estimate_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ESTIMATES_ESTIMATE_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ESTIMATE_BACKUP_ESTIMATE__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ESTIMATE_BACKUP_ESTIMATE__TRIG" BEFORE INSERT OR UPDATE ON estimate_backup
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.estimate_id IS NULL THEN
    SELECT  estimate_backup_estimate_i_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(estimate_id),0) INTO v_newVal FROM estimate_backup;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT estimate_backup_estimate_i_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.estimate_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ESTIMATE_BACKUP_ESTIMATE__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ESTIMATE_GROUPS_ESTIMATE__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ESTIMATE_GROUPS_ESTIMATE__TRIG" BEFORE INSERT OR UPDATE ON estimate_groups
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.estimate_grp IS NULL THEN
    SELECT  estimate_groups_estimate_g_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(estimate_grp),0) INTO v_newVal FROM estimate_groups;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT estimate_groups_estimate_g_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.estimate_grp := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ESTIMATE_GROUPS_ESTIMATE__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ESTIMATE_HISTORY_ESTIMATE_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ESTIMATE_HISTORY_ESTIMATE_TRIG" BEFORE INSERT OR UPDATE ON estimate_history
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.estimate_history_id IS NULL THEN
    SELECT  estimate_history_estimate__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(estimate_history_id),0) INTO v_newVal FROM estimate_history;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT estimate_history_estimate__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.estimate_history_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ESTIMATE_HISTORY_ESTIMATE_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ESTIMATE_HIST_ESTIMATE_HI_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ESTIMATE_HIST_ESTIMATE_HI_TRIG" BEFORE INSERT OR UPDATE ON estimate_hist
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.estimate_hist_id IS NULL THEN
    SELECT  estimate_hist_estimate_his_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(estimate_hist_id),0) INTO v_newVal FROM estimate_hist;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT estimate_hist_estimate_his_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.estimate_hist_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ESTIMATE_HIST_ESTIMATE_HI_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ESTIMATE_TYPES_ESTIMATE_T_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ESTIMATE_TYPES_ESTIMATE_T_TRIG" BEFORE INSERT OR UPDATE ON estimate_types
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.estimate_type_id IS NULL THEN
    SELECT  estimate_types_estimate_ty_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(estimate_type_id),0) INTO v_newVal FROM estimate_types;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT estimate_types_estimate_ty_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.estimate_type_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ESTIMATE_TYPES_ESTIMATE_T_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger EXEC_GROUPS_EXEC_GROUP_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "EXEC_GROUPS_EXEC_GROUP_ID_TRIG" BEFORE INSERT OR UPDATE ON exec_groups
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.exec_group_id IS NULL THEN
    SELECT  exec_groups_exec_group_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(exec_group_id),0) INTO v_newVal FROM exec_groups;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT exec_groups_exec_group_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.exec_group_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "EXEC_GROUPS_EXEC_GROUP_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger EXTERNAL_ACTIVITIES_ACTIV_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "EXTERNAL_ACTIVITIES_ACTIV_TRIG" BEFORE INSERT OR UPDATE ON external_activities
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.activity_id IS NULL THEN
    SELECT  external_activities_activi_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(activity_id),0) INTO v_newVal FROM external_activities;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT external_activities_activi_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.activity_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "EXTERNAL_ACTIVITIES_ACTIV_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger FORECAST_AREAS_FORECAST_A_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "FORECAST_AREAS_FORECAST_A_TRIG" BEFORE INSERT OR UPDATE ON forecast_areas
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.forecast_area_id IS NULL THEN
    SELECT  forecast_areas_forecast_ar_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(forecast_area_id),0) INTO v_newVal FROM forecast_areas;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT forecast_areas_forecast_ar_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.forecast_area_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "FORECAST_AREAS_FORECAST_A_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger FORECAST_GROUPS_PROJ_GROU_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "FORECAST_GROUPS_PROJ_GROU_TRIG" BEFORE INSERT OR UPDATE ON forecast_groups
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.proj_group IS NULL THEN
    SELECT  forecast_groups_proj_group_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(proj_group),0) INTO v_newVal FROM forecast_groups;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT forecast_groups_proj_group_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.proj_group := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "FORECAST_GROUPS_PROJ_GROU_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger FORECAST_PROJECTS_FUNDING_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "FORECAST_PROJECTS_FUNDING_TRIG" BEFORE INSERT OR UPDATE ON forecast_projects
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.funding_id IS NULL THEN
    SELECT  forecast_projects_funding__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(funding_id),0) INTO v_newVal FROM forecast_projects;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT forecast_projects_funding__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.funding_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "FORECAST_PROJECTS_FUNDING_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger FORECAST_PROJECT_STATUS_P_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "FORECAST_PROJECT_STATUS_P_TRIG" BEFORE INSERT OR UPDATE ON forecast_project_status
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.proj_status_id IS NULL THEN
    SELECT  forecast_project_status_pr_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(proj_status_id),0) INTO v_newVal FROM forecast_project_status;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT forecast_project_status_pr_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.proj_status_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "FORECAST_PROJECT_STATUS_P_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger FORECAST_STATUSES_STATUS__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "FORECAST_STATUSES_STATUS__TRIG" BEFORE INSERT OR UPDATE ON forecast_statuses
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.status_id IS NULL THEN
    SELECT  forecast_statuses_status_i_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(status_id),0) INTO v_newVal FROM forecast_statuses;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT forecast_statuses_status_i_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.status_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "FORECAST_STATUSES_STATUS__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger FORECAST_WEEKS_WEEKID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "FORECAST_WEEKS_WEEKID_TRIG" BEFORE INSERT OR UPDATE ON forecast_weeks
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.weekid IS NULL THEN
    SELECT  forecast_weeks_weekid_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(weekid),0) INTO v_newVal FROM forecast_weeks;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT forecast_weeks_weekid_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.weekid := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "FORECAST_WEEKS_WEEKID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger FUNDING_SOURCES_FUNDING_S_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "FUNDING_SOURCES_FUNDING_S_TRIG" BEFORE INSERT OR UPDATE ON funding_sources
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.funding_src_id IS NULL THEN
    SELECT  funding_sources_funding_sr_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(funding_src_id),0) INTO v_newVal FROM funding_sources;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT funding_sources_funding_sr_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.funding_src_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "FUNDING_SOURCES_FUNDING_S_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger FUNDING_TYPES_FUND_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "FUNDING_TYPES_FUND_ID_TRIG" BEFORE INSERT OR UPDATE ON funding_types
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.fund_id IS NULL THEN
    SELECT  funding_types_fund_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(fund_id),0) INTO v_newVal FROM funding_types;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT funding_types_fund_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.fund_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "FUNDING_TYPES_FUND_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger GROUP_INFO_GROUP_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "GROUP_INFO_GROUP_ID_TRIG" BEFORE INSERT OR UPDATE ON group_info
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.group_id IS NULL THEN
    SELECT  group_info_group_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(group_id),0) INTO v_newVal FROM group_info;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT group_info_group_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.group_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "GROUP_INFO_GROUP_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INSTALLS_INSTALL_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALLS_INSTALL_ID_TRIG" BEFORE INSERT OR UPDATE ON installs
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.install_id IS NULL THEN
    SELECT  installs_install_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(install_id),0) INTO v_newVal FROM installs;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT installs_install_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.install_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALLS_INSTALL_ID_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INSTALL_ENVIRONMENTS_INST_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALL_ENVIRONMENTS_INST_TRIG" BEFORE INSERT OR UPDATE ON install_environments
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.inst_env_id IS NULL THEN
    SELECT  install_environments_inst__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(inst_env_id),0) INTO v_newVal FROM install_environments;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT install_environments_inst__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.inst_env_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALL_ENVIRONMENTS_INST_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INSTALL_HISTORY_HIST_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALL_HISTORY_HIST_ID_TRIG" BEFORE INSERT OR UPDATE ON install_history
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.hist_id IS NULL THEN
    SELECT  install_history_hist_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(hist_id),0) INTO v_newVal FROM install_history;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT install_history_hist_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.hist_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALL_HISTORY_HIST_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INSTALL_ISSUES_INSTALL_IS_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALL_ISSUES_INSTALL_IS_TRIG" BEFORE INSERT OR UPDATE ON install_issues
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.install_issue_id IS NULL THEN
    SELECT  install_issues_install_iss_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(install_issue_id),0) INTO v_newVal FROM install_issues;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT install_issues_install_iss_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.install_issue_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALL_ISSUES_INSTALL_IS_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INSTALL_ISSUE_COPY_INSTAL_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALL_ISSUE_COPY_INSTAL_TRIG" BEFORE INSERT OR UPDATE ON install_issue_copy
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.install_issue_id IS NULL THEN
    SELECT  install_issue_copy_install_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(install_issue_id),0) INTO v_newVal FROM install_issue_copy;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT install_issue_copy_install_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.install_issue_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALL_ISSUE_COPY_INSTAL_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INSTALL_MILESTONES_INST_M_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALL_MILESTONES_INST_M_TRIG" BEFORE INSERT OR UPDATE ON install_milestones
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.inst_mile_id IS NULL THEN
    SELECT  install_milestones_inst_mi_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(inst_mile_id),0) INTO v_newVal FROM install_milestones;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT install_milestones_inst_mi_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.inst_mile_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALL_MILESTONES_INST_M_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INSTALL_STATUSES_INSTALL__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALL_STATUSES_INSTALL__TRIG" BEFORE INSERT OR UPDATE ON install_statuses
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.install_status_id IS NULL THEN
    SELECT  install_statuses_install_s_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(install_status_id),0) INTO v_newVal FROM install_statuses;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT install_statuses_install_s_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.install_status_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALL_STATUSES_INSTALL__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INSTALL_TASKS_TASK_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALL_TASKS_TASK_ID_TRIG" BEFORE INSERT OR UPDATE ON install_tasks
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.task_id IS NULL THEN
    SELECT  install_tasks_task_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(task_id),0) INTO v_newVal FROM install_tasks;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT install_tasks_task_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.task_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALL_TASKS_TASK_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INSTALL_TYPES_INSTALL_TYP_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INSTALL_TYPES_INSTALL_TYP_TRIG" BEFORE INSERT OR UPDATE ON install_types
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.install_type IS NULL THEN
    SELECT  install_types_install_type_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(install_type),0) INTO v_newVal FROM install_types;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT install_types_install_type_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.install_type := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INSTALL_TYPES_INSTALL_TYP_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INST_MILESTONE_TYPES_INST_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INST_MILESTONE_TYPES_INST_TRIG" BEFORE INSERT OR UPDATE ON inst_milestone_types
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.inst_milestone_type_id IS NULL THEN
    SELECT  inst_milestone_types_inst__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(inst_milestone_type_id),0) INTO v_newVal FROM inst_milestone_types;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT inst_milestone_types_inst__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.inst_milestone_type_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INST_MILESTONE_TYPES_INST_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger INTAKE_TECH_COMPONENT_GRO_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "INTAKE_TECH_COMPONENT_GRO_TRIG" BEFORE INSERT OR UPDATE ON intake_tech_component_grouping
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.intake_group_id IS NULL THEN
    SELECT  intake_tech_component_grou_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(intake_group_id),0) INTO v_newVal FROM intake_tech_component_grouping;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT intake_tech_component_grou_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.intake_group_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "INTAKE_TECH_COMPONENT_GRO_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOBS_LOB_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "LOBS_LOB_ID_TRIG" BEFORE INSERT OR UPDATE ON lobs
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.lob_id IS NULL THEN
    SELECT  lobs_lob_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(lob_id),0) INTO v_newVal FROM lobs;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT lobs_lob_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.lob_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "LOBS_LOB_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger NOTES_NOTE_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "NOTES_NOTE_ID_TRIG" BEFORE INSERT OR UPDATE ON notes
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.note_id IS NULL THEN
    SELECT  notes_note_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(note_id),0) INTO v_newVal FROM notes;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT notes_note_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.note_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "NOTES_NOTE_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger NOTIFY_REPORTS_REPORT_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "NOTIFY_REPORTS_REPORT_ID_TRIG" BEFORE INSERT OR UPDATE ON notify_reports
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.report_id IS NULL THEN
    SELECT  notify_reports_report_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(report_id),0) INTO v_newVal FROM notify_reports;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT notify_reports_report_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.report_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "NOTIFY_REPORTS_REPORT_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ONCALL_COVERAGE_COVERAGET_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ONCALL_COVERAGE_COVERAGET_TRIG" BEFORE INSERT OR UPDATE ON oncall_coverage
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.coveragetype IS NULL THEN
    SELECT  oncall_coverage_coveragety_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(coveragetype),0) INTO v_newVal FROM oncall_coverage;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT oncall_coverage_coveragety_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.coveragetype := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ONCALL_COVERAGE_COVERAGET_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ONCALL_COVERAGE_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ONCALL_COVERAGE_ID_TRIG" BEFORE INSERT OR UPDATE ON oncall
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.coverage_id IS NULL THEN
    SELECT  oncall_coverage_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(coverage_id),0) INTO v_newVal FROM oncall;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT oncall_coverage_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.coverage_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ONCALL_COVERAGE_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ORGANIZATIONS_ORG_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ORGANIZATIONS_ORG_ID_TRIG" BEFORE INSERT OR UPDATE ON organizations
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.org_id IS NULL THEN
    SELECT  organizations_org_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(org_id),0) INTO v_newVal FROM organizations;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT organizations_org_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.org_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "ORGANIZATIONS_ORG_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger PILLARS_PILLAR_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PILLARS_PILLAR_ID_TRIG" BEFORE INSERT OR UPDATE ON pillars
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.pillar_id IS NULL THEN
    SELECT  pillars_pillar_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(pillar_id),0) INTO v_newVal FROM pillars;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT pillars_pillar_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.pillar_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "PILLARS_PILLAR_ID_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRODUCTS_PRODUCT_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "PRODUCTS_PRODUCT_ID_TRIG" BEFORE INSERT OR UPDATE ON products
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.product_id IS NULL THEN
    SELECT  products_product_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(product_id),0) INTO v_newVal FROM products;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT products_product_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.product_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "PRODUCTS_PRODUCT_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger REPORTFILTERS_FILTER_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "REPORTFILTERS_FILTER_ID_TRIG" BEFORE INSERT OR UPDATE ON reportfilters
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.filter_id IS NULL THEN
    SELECT  reportfilters_filter_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(filter_id),0) INTO v_newVal FROM reportfilters;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT reportfilters_filter_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.filter_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "REPORTFILTERS_FILTER_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger SCOPE_ITEMS_SCOPE_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SCOPE_ITEMS_SCOPE_ID_TRIG" BEFORE INSERT OR UPDATE ON scope_items
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.scope_id IS NULL THEN
    SELECT  scope_items_scope_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(scope_id),0) INTO v_newVal FROM scope_items;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT scope_items_scope_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.scope_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "SCOPE_ITEMS_SCOPE_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger SIZE_DATE_SIZE_REF_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SIZE_DATE_SIZE_REF_TRIG" BEFORE INSERT OR UPDATE ON size_date
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.size_ref IS NULL THEN
    SELECT  size_date_size_ref_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(size_ref),0) INTO v_newVal FROM size_date;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT size_date_size_ref_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.size_ref := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "SIZE_DATE_SIZE_REF_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger SIZING_DEF_SIZE_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SIZING_DEF_SIZE_ID_TRIG" BEFORE INSERT OR UPDATE ON sizing_def
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.size_id IS NULL THEN
    SELECT  sizing_def_size_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(size_id),0) INTO v_newVal FROM sizing_def;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT sizing_def_size_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.size_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "SIZING_DEF_SIZE_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STATUS_STATUS_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STATUS_STATUS_ID_TRIG" BEFORE INSERT OR UPDATE ON status
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.status_id IS NULL THEN
    SELECT  status_status_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(status_id),0) INTO v_newVal FROM status;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT status_status_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.status_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STATUS_STATUS_ID_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger STRATEGIES_COPY_STRAT_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRATEGIES_COPY_STRAT_ID_TRIG" BEFORE INSERT OR UPDATE ON strategies_copy
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.strat_id IS NULL THEN
    SELECT  strategies_copy_strat_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(strat_id),0) INTO v_newVal FROM strategies_copy;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strategies_copy_strat_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.strat_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRATEGIES_COPY_STRAT_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRATEGIES_STRAT_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRATEGIES_STRAT_ID_TRIG" BEFORE INSERT OR UPDATE ON strategies
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.strat_id IS NULL THEN
    SELECT  strategies_strat_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(strat_id),0) INTO v_newVal FROM strategies;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strategies_strat_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.strat_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRATEGIES_STRAT_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_CATEGORIES_STRAT_CA_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_CATEGORIES_STRAT_CA_TRIG" BEFORE INSERT OR UPDATE ON strat_categories
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.strat_cat_id IS NULL THEN
    SELECT  strat_categories_strat_cat_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(strat_cat_id),0) INTO v_newVal FROM strat_categories;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_categories_strat_cat_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.strat_cat_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_CATEGORIES_STRAT_CA_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_ESTIMATES_ESTIMATE__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_ESTIMATES_ESTIMATE__TRIG" BEFORE INSERT OR UPDATE ON strat_estimates
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.estimate_id IS NULL THEN
    SELECT  strat_estimates_estimate_i_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(estimate_id),0) INTO v_newVal FROM strat_estimates;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_estimates_estimate_i_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.estimate_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_ESTIMATES_ESTIMATE__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_HISTORY_HIST_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_HISTORY_HIST_ID_TRIG" BEFORE INSERT OR UPDATE ON strat_history
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.hist_id IS NULL THEN
    SELECT  strat_history_hist_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(hist_id),0) INTO v_newVal FROM strat_history;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_history_hist_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.hist_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_HISTORY_HIST_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_ISSUES_RISKS_ISSUE__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_ISSUES_RISKS_ISSUE__TRIG" BEFORE INSERT OR UPDATE ON strat_issues_risks
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.issue_id IS NULL THEN
    SELECT  strat_issues_risks_issue_i_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(issue_id),0) INTO v_newVal FROM strat_issues_risks;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_issues_risks_issue_i_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.issue_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_ISSUES_RISKS_ISSUE__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_ISSUES_RISKS_TYPES__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_ISSUES_RISKS_TYPES__TRIG" BEFORE INSERT OR UPDATE ON strat_issues_risks_types
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.strat_issue_type IS NULL THEN
    SELECT  strat_issues_risks_types_s_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(strat_issue_type),0) INTO v_newVal FROM strat_issues_risks_types;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_issues_risks_types_s_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.strat_issue_type := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_ISSUES_RISKS_TYPES__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_PHASES_STRAT_PHASE__TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_PHASES_STRAT_PHASE__TRIG" BEFORE INSERT OR UPDATE ON strat_phases
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.strat_phase_id IS NULL THEN
    SELECT  strat_phases_strat_phase_i_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(strat_phase_id),0) INTO v_newVal FROM strat_phases;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_phases_strat_phase_i_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.strat_phase_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_PHASES_STRAT_PHASE__TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_PHASE_HISTORY_STRAT_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_PHASE_HISTORY_STRAT_TRIG" BEFORE INSERT OR UPDATE ON strat_phase_history
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.strat_phase_history_id IS NULL THEN
    SELECT  strat_phase_history_strat__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(strat_phase_history_id),0) INTO v_newVal FROM strat_phase_history;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_phase_history_strat__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.strat_phase_history_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_PHASE_HISTORY_STRAT_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_ROLES_ROLE_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_ROLES_ROLE_ID_TRIG" BEFORE INSERT OR UPDATE ON strat_roles
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.role_id IS NULL THEN
    SELECT  strat_roles_role_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(role_id),0) INTO v_newVal FROM strat_roles;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_roles_role_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.role_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_ROLES_ROLE_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_STATUS_HISTORY_STRA_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_STATUS_HISTORY_STRA_TRIG" BEFORE INSERT OR UPDATE ON strat_status_history
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.strat_statushistory_id IS NULL THEN
    SELECT  strat_status_history_strat_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(strat_statushistory_id),0) INTO v_newVal FROM strat_status_history;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_status_history_strat_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.strat_statushistory_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_STATUS_HISTORY_STRA_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_STATUS_STRAT_STATUS_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_STATUS_STRAT_STATUS_TRIG" BEFORE INSERT OR UPDATE ON strat_status
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.strat_status_id IS NULL THEN
    SELECT  strat_status_strat_status__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(strat_status_id),0) INTO v_newVal FROM strat_status;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_status_strat_status__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.strat_status_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_STATUS_STRAT_STATUS_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_TASKS_TASK_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_TASKS_TASK_ID_TRIG" BEFORE INSERT OR UPDATE ON strat_tasks
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.task_id IS NULL THEN
    SELECT  strat_tasks_task_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(task_id),0) INTO v_newVal FROM strat_tasks;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_tasks_task_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.task_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_TASKS_TASK_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger STRAT_TASK_STATUS_TASK_ST_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "STRAT_TASK_STATUS_TASK_ST_TRIG" BEFORE INSERT OR UPDATE ON strat_task_status
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.task_status_id IS NULL THEN
    SELECT  strat_task_status_task_sta_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(task_status_id),0) INTO v_newVal FROM strat_task_status;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT strat_task_status_task_sta_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.task_status_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "STRAT_TASK_STATUS_TASK_ST_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TASK_MILESTONES_MILESTONE_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "TASK_MILESTONES_MILESTONE_TRIG" BEFORE INSERT OR UPDATE ON task_milestones
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.milestone_id IS NULL THEN
    SELECT  task_milestones_milestone__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(milestone_id),0) INTO v_newVal FROM task_milestones;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT task_milestones_milestone__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.milestone_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "TASK_MILESTONES_MILESTONE_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TECH_COMPONENTS_COMPONENT_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "TECH_COMPONENTS_COMPONENT_TRIG" BEFORE INSERT OR UPDATE ON tech_components
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.component_id IS NULL THEN
    SELECT  tech_components_component__SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(component_id),0) INTO v_newVal FROM tech_components;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT tech_components_component__SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.component_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "TECH_COMPONENTS_COMPONENT_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger TESTTABL_TEST_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "TESTTABL_TEST_ID_TRIG" BEFORE INSERT OR UPDATE ON testtabl
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.test_id IS NULL THEN
    SELECT  testtabl_test_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(test_id),0) INTO v_newVal FROM testtabl;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT testtabl_test_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.test_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "TESTTABL_TEST_ID_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USER_GROUPS_GROUP_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_GROUPS_GROUP_ID_TRIG" BEFORE INSERT OR UPDATE ON user_groups
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.group_id IS NULL THEN
    SELECT  user_groups_group_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(group_id),0) INTO v_newVal FROM user_groups;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT user_groups_group_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.group_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "USER_GROUPS_GROUP_ID_TRIG" ENABLE;

--------------------------------------------------------
--  DDL for Trigger USER_TYPES_USERTYPE_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_TYPES_USERTYPE_ID_TRIG" BEFORE INSERT OR UPDATE ON user_types
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.usertype_id IS NULL THEN
    SELECT  user_types_usertype_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(usertype_id),0) INTO v_newVal FROM user_types;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT user_types_usertype_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.usertype_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "USER_TYPES_USERTYPE_ID_TRIG" ENABLE;
